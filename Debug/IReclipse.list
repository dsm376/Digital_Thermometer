
IReclipse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002e80  08002e80  00012e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef0  08002ef0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef0  08002ef0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef0  08002ef0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  08002f04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002f04  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be3c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c8e  00000000  00000000  0002be70  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002db00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002e718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001ded  00000000  00000000  0002f238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a956  00000000  00000000  00031025  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007fd9e  00000000  00000000  0003b97b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb719  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000bb794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e68 	.word	0x08002e68

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e68 	.word	0x08002e68

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f0:	f000 fafc 	bl	80009ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f4:	f000 f809 	bl	800040a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f8:	f000 f936 	bl	8000668 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003fc:	f000 f868 	bl	80004d0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000400:	f000 f8a6 	bl	8000550 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000404:	f000 f8e2 	bl	80005cc <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000408:	e7fe      	b.n	8000408 <main+0x1c>

0800040a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040a:	b590      	push	{r4, r7, lr}
 800040c:	b099      	sub	sp, #100	; 0x64
 800040e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000410:	242c      	movs	r4, #44	; 0x2c
 8000412:	193b      	adds	r3, r7, r4
 8000414:	0018      	movs	r0, r3
 8000416:	2334      	movs	r3, #52	; 0x34
 8000418:	001a      	movs	r2, r3
 800041a:	2100      	movs	r1, #0
 800041c:	f002 fd1c 	bl	8002e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000420:	231c      	movs	r3, #28
 8000422:	18fb      	adds	r3, r7, r3
 8000424:	0018      	movs	r0, r3
 8000426:	2310      	movs	r3, #16
 8000428:	001a      	movs	r2, r3
 800042a:	2100      	movs	r1, #0
 800042c:	f002 fd14 	bl	8002e58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000430:	003b      	movs	r3, r7
 8000432:	0018      	movs	r0, r3
 8000434:	231c      	movs	r3, #28
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 fd0d 	bl	8002e58 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	0018      	movs	r0, r3
 8000444:	f000 feba 	bl	80011bc <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2202      	movs	r2, #2
 800044c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800044e:	193b      	adds	r3, r7, r4
 8000450:	2280      	movs	r2, #128	; 0x80
 8000452:	0052      	lsls	r2, r2, #1
 8000454:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2240      	movs	r2, #64	; 0x40
 8000460:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	f000 fef2 	bl	8001254 <HAL_RCC_OscConfig>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000474:	f000 f95c 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	211c      	movs	r1, #28
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2207      	movs	r2, #7
 800047e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2200      	movs	r2, #0
 8000484:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f001 f9f2 	bl	8001880 <HAL_RCC_ClockConfig>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004a0:	f000 f946 	bl	8000730 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80004a4:	003b      	movs	r3, r7
 80004a6:	2241      	movs	r2, #65	; 0x41
 80004a8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004aa:	003b      	movs	r3, r7
 80004ac:	2200      	movs	r2, #0
 80004ae:	605a      	str	r2, [r3, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004b0:	003b      	movs	r3, r7
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b6:	003b      	movs	r3, r7
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 fb8b 	bl	8001bd4 <HAL_RCCEx_PeriphCLKConfig>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80004c2:	f000 f935 	bl	8000730 <Error_Handler>
  }
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b019      	add	sp, #100	; 0x64
 80004cc:	bd90      	pop	{r4, r7, pc}
	...

080004d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_I2C1_Init+0x74>)
 80004d6:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <MX_I2C1_Init+0x78>)
 80004d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <MX_I2C1_Init+0x74>)
 80004dc:	4a1b      	ldr	r2, [pc, #108]	; (800054c <MX_I2C1_Init+0x7c>)
 80004de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_I2C1_Init+0x74>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <MX_I2C1_Init+0x74>)
 80004e8:	2201      	movs	r2, #1
 80004ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_I2C1_Init+0x74>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <MX_I2C1_Init+0x74>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <MX_I2C1_Init+0x74>)
 8000500:	2200      	movs	r2, #0
 8000502:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <MX_I2C1_Init+0x74>)
 800050c:	0018      	movs	r0, r3
 800050e:	f000 fd27 	bl	8000f60 <HAL_I2C_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000516:	f000 f90b 	bl	8000730 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <MX_I2C1_Init+0x74>)
 800051c:	2100      	movs	r1, #0
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fdb4 	bl	800108c <HAL_I2CEx_ConfigAnalogFilter>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000528:	f000 f902 	bl	8000730 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <MX_I2C1_Init+0x74>)
 800052e:	2100      	movs	r1, #0
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fdf7 	bl	8001124 <HAL_I2CEx_ConfigDigitalFilter>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800053a:	f000 f8f9 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000028 	.word	0x20000028
 8000548:	40005400 	.word	0x40005400
 800054c:	0010061a 	.word	0x0010061a

08000550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <MX_SPI1_Init+0x78>)
 8000558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <MX_SPI1_Init+0x74>)
 800055c:	2282      	movs	r2, #130	; 0x82
 800055e:	0052      	lsls	r2, r2, #1
 8000560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <MX_SPI1_Init+0x74>)
 800056a:	22c0      	movs	r2, #192	; 0xc0
 800056c:	0092      	lsls	r2, r2, #2
 800056e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_SPI1_Init+0x74>)
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	02d2      	lsls	r2, r2, #11
 8000582:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000586:	2218      	movs	r2, #24
 8000588:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MX_SPI1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MX_SPI1_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <MX_SPI1_Init+0x74>)
 800059e:	2207      	movs	r2, #7
 80005a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MX_SPI1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_SPI1_Init+0x74>)
 80005aa:	2208      	movs	r2, #8
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MX_SPI1_Init+0x74>)
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fc45 	bl	8001e40 <HAL_SPI_Init>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005ba:	f000 f8b9 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000100 	.word	0x20000100
 80005c8:	40013000 	.word	0x40013000

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005d2:	4a24      	ldr	r2, [pc, #144]	; (8000664 <MX_USART1_UART_Init+0x98>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005d8:	22e1      	movs	r2, #225	; 0xe1
 80005da:	0252      	lsls	r2, r2, #9
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0552      	lsls	r2, r2, #21
 80005e4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005f4:	220c      	movs	r2, #12
 80005f6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_USART1_UART_Init+0x94>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_USART1_UART_Init+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_USART1_UART_Init+0x94>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_USART1_UART_Init+0x94>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_USART1_UART_Init+0x94>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_USART1_UART_Init+0x94>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fcab 	bl	8001f74 <HAL_UART_Init>
 800061e:	1e03      	subs	r3, r0, #0
 8000620:	d001      	beq.n	8000626 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000622:	f000 f885 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART1_UART_Init+0x94>)
 8000628:	2100      	movs	r1, #0
 800062a:	0018      	movs	r0, r3
 800062c:	f002 fb04 	bl	8002c38 <HAL_UARTEx_SetTxFifoThreshold>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000634:	f000 f87c 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART1_UART_Init+0x94>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fb3b 	bl	8002cb8 <HAL_UARTEx_SetRxFifoThreshold>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000646:	f000 f873 	bl	8000730 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_USART1_UART_Init+0x94>)
 800064c:	0018      	movs	r0, r3
 800064e:	f002 fab9 	bl	8002bc4 <HAL_UARTEx_DisableFifoMode>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000656:	f000 f86b 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000074 	.word	0x20000074
 8000664:	40013800 	.word	0x40013800

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	240c      	movs	r4, #12
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f002 fbed 	bl	8002e58 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_GPIO_Init+0xbc>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <MX_GPIO_Init+0xbc>)
 8000684:	2101      	movs	r1, #1
 8000686:	430a      	orrs	r2, r1
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
 800068a:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_GPIO_Init+0xbc>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_GPIO_Init+0xbc>)
 8000698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_GPIO_Init+0xbc>)
 800069c:	2102      	movs	r1, #2
 800069e:	430a      	orrs	r2, r1
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_GPIO_Init+0xbc>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a6:	2202      	movs	r2, #2
 80006a8:	4013      	ands	r3, r2
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIGGER_BUTTON_Pin|UP_Pin|SLAVE_SELECT_Pin|DOWN_Pin 
 80006ae:	491e      	ldr	r1, [pc, #120]	; (8000728 <MX_GPIO_Init+0xc0>)
 80006b0:	23a0      	movs	r3, #160	; 0xa0
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2200      	movs	r2, #0
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fc34 	bl	8000f24 <HAL_GPIO_WritePin>
                          |BUZZER_Pin|DC_Pin|LED_Pin|CHARGE_DETECT_Pin 
                          |SWDIO_Pin|SWCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RES_Pin|MODE_Pin, GPIO_PIN_RESET);
 80006bc:	2382      	movs	r3, #130	; 0x82
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <MX_GPIO_Init+0xc4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	0019      	movs	r1, r3
 80006c6:	f000 fc2d 	bl	8000f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIGGER_BUTTON_Pin UP_Pin SLAVE_SELECT_Pin DOWN_Pin 
                           BUZZER_Pin DC_Pin LED_Pin CHARGE_DETECT_Pin 
                           SWDIO_Pin SWCLK_Pin */
  GPIO_InitStruct.Pin = TRIGGER_BUTTON_Pin|UP_Pin|SLAVE_SELECT_Pin|DOWN_Pin 
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	4a16      	ldr	r2, [pc, #88]	; (8000728 <MX_GPIO_Init+0xc0>)
 80006d0:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin|DC_Pin|LED_Pin|CHARGE_DETECT_Pin 
                          |SWDIO_Pin|SWCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	000c      	movs	r4, r1
 80006e6:	187a      	adds	r2, r7, r1
 80006e8:	23a0      	movs	r3, #160	; 0xa0
 80006ea:	05db      	lsls	r3, r3, #23
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fab4 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RES_Pin MODE_Pin */
  GPIO_InitStruct.Pin = RES_Pin|MODE_Pin;
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2282      	movs	r2, #130	; 0x82
 80006fa:	0052      	lsls	r2, r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	187b      	adds	r3, r7, r1
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <MX_GPIO_Init+0xc4>)
 8000714:	0019      	movs	r1, r3
 8000716:	0010      	movs	r0, r2
 8000718:	f000 faa0 	bl	8000c5c <HAL_GPIO_Init>

}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b009      	add	sp, #36	; 0x24
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	0000795b 	.word	0x0000795b
 800072c:	50000400 	.word	0x50000400

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x44>)
 8000744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x44>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	641a      	str	r2, [r3, #64]	; 0x40
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x44>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x44>)
 800075c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x44>)
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0549      	lsls	r1, r1, #21
 8000764:	430a      	orrs	r2, r1
 8000766:	63da      	str	r2, [r3, #60]	; 0x3c
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_MspInit+0x44>)
 800076a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	055b      	lsls	r3, r3, #21
 8000770:	4013      	ands	r3, r2
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	; 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	2314      	movs	r3, #20
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	0018      	movs	r0, r3
 8000792:	2314      	movs	r3, #20
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 fb5e 	bl	8002e58 <memset>
  if(hi2c->Instance==I2C1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <HAL_I2C_MspInit+0x90>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d131      	bne.n	800080a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007be:	2114      	movs	r1, #20
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	22c0      	movs	r2, #192	; 0xc0
 80007c4:	00d2      	lsls	r2, r2, #3
 80007c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	2212      	movs	r2, #18
 80007cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2206      	movs	r2, #6
 80007de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e0:	187a      	adds	r2, r7, r1
 80007e2:	23a0      	movs	r3, #160	; 0xa0
 80007e4:	05db      	lsls	r3, r3, #23
 80007e6:	0011      	movs	r1, r2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 fa37 	bl	8000c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0389      	lsls	r1, r1, #14
 80007f8:	430a      	orrs	r2, r1
 80007fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_I2C_MspInit+0x94>)
 80007fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	039b      	lsls	r3, r3, #14
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b00a      	add	sp, #40	; 0x28
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40005400 	.word	0x40005400
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	2314      	movs	r3, #20
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	0018      	movs	r0, r3
 800082a:	2314      	movs	r3, #20
 800082c:	001a      	movs	r2, r3
 800082e:	2100      	movs	r1, #0
 8000830:	f002 fb12 	bl	8002e58 <memset>
  if(hspi->Instance==SPI1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <HAL_SPI_MspInit+0x8c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12f      	bne.n	800089e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <HAL_SPI_MspInit+0x90>)
 8000840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_SPI_MspInit+0x90>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0149      	lsls	r1, r1, #5
 8000848:	430a      	orrs	r2, r1
 800084a:	641a      	str	r2, [r3, #64]	; 0x40
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_SPI_MspInit+0x90>)
 800084e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	015b      	lsls	r3, r3, #5
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_SPI_MspInit+0x90>)
 800085c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_SPI_MspInit+0x90>)
 8000860:	2102      	movs	r1, #2
 8000862:	430a      	orrs	r2, r1
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <HAL_SPI_MspInit+0x90>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	2202      	movs	r2, #2
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000872:	2114      	movs	r1, #20
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2239      	movs	r2, #57	; 0x39
 8000878:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2202      	movs	r2, #2
 800087e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000892:	187b      	adds	r3, r7, r1
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_SPI_MspInit+0x94>)
 8000896:	0019      	movs	r1, r3
 8000898:	0010      	movs	r0, r2
 800089a:	f000 f9df 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b00a      	add	sp, #40	; 0x28
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40013000 	.word	0x40013000
 80008ac:	40021000 	.word	0x40021000
 80008b0:	50000400 	.word	0x50000400

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	2314      	movs	r3, #20
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	0018      	movs	r0, r3
 80008c2:	2314      	movs	r3, #20
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f002 fac6 	bl	8002e58 <memset>
  if(huart->Instance==USART1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <HAL_UART_MspInit+0x8c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12f      	bne.n	8000936 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_UART_MspInit+0x90>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_UART_MspInit+0x90>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	01c9      	lsls	r1, r1, #7
 80008e0:	430a      	orrs	r2, r1
 80008e2:	641a      	str	r2, [r3, #64]	; 0x40
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <HAL_UART_MspInit+0x90>)
 80008e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	01db      	lsls	r3, r3, #7
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x90>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_UART_MspInit+0x90>)
 80008f8:	2102      	movs	r1, #2
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <HAL_UART_MspInit+0x90>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000902:	2202      	movs	r2, #2
 8000904:	4013      	ands	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800090a:	2114      	movs	r1, #20
 800090c:	187b      	adds	r3, r7, r1
 800090e:	22c0      	movs	r2, #192	; 0xc0
 8000910:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	187b      	adds	r3, r7, r1
 800092c:	4a06      	ldr	r2, [pc, #24]	; (8000948 <HAL_UART_MspInit+0x94>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f000 f993 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b00a      	add	sp, #40	; 0x28
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40013800 	.word	0x40013800
 8000944:	40021000 	.word	0x40021000
 8000948:	50000400 	.word	0x50000400

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000974:	f000 f8a4 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <SystemInit+0x14>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	0512      	lsls	r2, r2, #20
 800098a:	609a      	str	r2, [r3, #8]
#endif
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800099a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800099c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800099e:	e003      	b.n	80009a8 <LoopCopyDataInit>

080009a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009a6:	3104      	adds	r1, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a8:	480b      	ldr	r0, [pc, #44]	; (80009d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <LoopForever+0xe>)
  adds r2, r0, r1
 80009ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009b0:	d3f6      	bcc.n	80009a0 <CopyDataInit>
  ldr r2, =_sbss
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80009b4:	e002      	b.n	80009bc <LoopFillZerobss>

080009b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80009b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ba:	3204      	adds	r2, #4

080009bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <LoopForever+0x16>)
  cmp r2, r3
 80009be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009c0:	d3f9      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009c2:	f7ff ffdd 	bl	8000980 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009c6:	f002 fa23 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fd0f 	bl	80003ec <main>

080009ce <LoopForever>:

LoopForever:
    b LoopForever
 80009ce:	e7fe      	b.n	80009ce <LoopForever>
  ldr   r0, =_estack
 80009d0:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80009d4:	08002ef8 	.word	0x08002ef8
  ldr r0, =_sdata
 80009d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80009e0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80009e4:	20000168 	.word	0x20000168

080009e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC1_IRQHandler>
	...

080009ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x3c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Init+0x3c>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	0049      	lsls	r1, r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f810 	bl	8000a2c <HAL_InitTick>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e001      	b.n	8000a1c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe90 	bl	800073c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40022000 	.word	0x40022000

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_InitTick+0x88>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d02b      	beq.n	8000a9c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <HAL_InitTick+0x8c>)
 8000a46:	681c      	ldr	r4, [r3, #0]
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_InitTick+0x88>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	23fa      	movs	r3, #250	; 0xfa
 8000a50:	0098      	lsls	r0, r3, #2
 8000a52:	f7ff fb55 	bl	8000100 <__udivsi3>
 8000a56:	0003      	movs	r3, r0
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f7ff fb50 	bl	8000100 <__udivsi3>
 8000a60:	0003      	movs	r3, r0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 f8ed 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d112      	bne.n	8000a92 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d80a      	bhi.n	8000a88 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	2301      	movs	r3, #1
 8000a76:	425b      	negs	r3, r3
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 f8cc 	bl	8000c18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_InitTick+0x90>)
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e00d      	b.n	8000aa4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e008      	b.n	8000aa4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a92:	230f      	movs	r3, #15
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e003      	b.n	8000aa4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
}
 8000aaa:	0018      	movs	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b005      	add	sp, #20
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <HAL_IncTick+0x18>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_IncTick+0x1c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	18d2      	adds	r2, r2, r3
 8000ace:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <HAL_IncTick+0x18>)
 8000ad0:	601a      	str	r2, [r3, #0]
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000164 	.word	0x20000164
 8000adc:	20000008 	.word	0x20000008

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	20000164 	.word	0x20000164

08000af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b7f      	cmp	r3, #127	; 0x7f
 8000b08:	d828      	bhi.n	8000b5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	089b      	lsrs	r3, r3, #2
 8000b14:	33c0      	adds	r3, #192	; 0xc0
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	589b      	ldr	r3, [r3, r2]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	481f      	ldr	r0, [pc, #124]	; (8000bc8 <__NVIC_SetPriority+0xd4>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b25b      	sxtb	r3, r3
 8000b50:	089b      	lsrs	r3, r3, #2
 8000b52:	430a      	orrs	r2, r1
 8000b54:	33c0      	adds	r3, #192	; 0xc0
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b5a:	e031      	b.n	8000bc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	0019      	movs	r1, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	400b      	ands	r3, r1
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	3304      	adds	r3, #4
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1dfa      	adds	r2, r7, #7
 8000b78:	7812      	ldrb	r2, [r2, #0]
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	400a      	ands	r2, r1
 8000b80:	00d2      	lsls	r2, r2, #3
 8000b82:	21ff      	movs	r1, #255	; 0xff
 8000b84:	4091      	lsls	r1, r2
 8000b86:	000a      	movs	r2, r1
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	22ff      	movs	r2, #255	; 0xff
 8000b94:	401a      	ands	r2, r3
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	4003      	ands	r3, r0
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba4:	4809      	ldr	r0, [pc, #36]	; (8000bcc <__NVIC_SetPriority+0xd8>)
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	001c      	movs	r4, r3
 8000bac:	230f      	movs	r3, #15
 8000bae:	4023      	ands	r3, r4
 8000bb0:	3b08      	subs	r3, #8
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	18c3      	adds	r3, r0, r3
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bd90      	pop	{r4, r7, pc}
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <SysTick_Config+0x40>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d901      	bls.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e010      	b.n	8000c08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <SysTick_Config+0x44>)
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	3a01      	subs	r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	425b      	negs	r3, r3
 8000bf2:	2103      	movs	r1, #3
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ff7d 	bl	8000af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SysTick_Config+0x44>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x44>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c06:	2300      	movs	r3, #0
}
 8000c08:	0018      	movs	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	00ffffff 	.word	0x00ffffff
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	210f      	movs	r1, #15
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	1c02      	adds	r2, r0, #0
 8000c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ff5d 	bl	8000af4 <__NVIC_SetPriority>
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ffbf 	bl	8000bd0 <SysTick_Config>
 8000c52:	0003      	movs	r3, r0
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b002      	add	sp, #8
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e147      	b.n	8000efc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <HAL_GPIO_Init+0x28>
 8000c82:	e138      	b.n	8000ef6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_Init+0x38>
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b12      	cmp	r3, #18
 8000c92:	d123      	bne.n	8000cdc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	08da      	lsrs	r2, r3, #3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3208      	adds	r2, #8
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	58d3      	ldr	r3, [r2, r3]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	220f      	movs	r2, #15
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	43da      	mvns	r2, r3
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	691a      	ldr	r2, [r3, #16]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	0013      	movs	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	6939      	ldr	r1, [r7, #16]
 8000cda:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	409a      	lsls	r2, r3
 8000d02:	0013      	movs	r3, r2
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d00b      	beq.n	8000d30 <HAL_GPIO_Init+0xd4>
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d007      	beq.n	8000d30 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d24:	2b11      	cmp	r3, #17
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b12      	cmp	r3, #18
 8000d2e:	d130      	bne.n	8000d92 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	0013      	movs	r3, r2
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d66:	2201      	movs	r2, #1
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
 8000d84:	0013      	movs	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	055b      	lsls	r3, r3, #21
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_GPIO_Init+0x174>
 8000dce:	e092      	b.n	8000ef6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dd0:	4a50      	ldr	r2, [pc, #320]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3318      	adds	r3, #24
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	589b      	ldr	r3, [r3, r2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	220f      	movs	r2, #15
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x1ca>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x1c6>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_GPIO_Init+0x2c0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x1c2>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a43      	ldr	r2, [pc, #268]	; (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x1be>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e006      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	e004      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e1e:	2302      	movs	r3, #2
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e22:	2301      	movs	r3, #1
 8000e24:	e000      	b.n	8000e28 <HAL_GPIO_Init+0x1cc>
 8000e26:	2300      	movs	r3, #0
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	2103      	movs	r1, #3
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	00d2      	lsls	r2, r2, #3
 8000e30:	4093      	lsls	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e38:	4936      	ldr	r1, [pc, #216]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	089b      	lsrs	r3, r3, #2
 8000e3e:	3318      	adds	r3, #24
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e46:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e48:	2380      	movs	r3, #128	; 0x80
 8000e4a:	58d3      	ldr	r3, [r2, r3]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	4013      	ands	r3, r2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e6c:	4929      	ldr	r1, [pc, #164]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000e74:	4a27      	ldr	r2, [pc, #156]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e76:	2384      	movs	r3, #132	; 0x84
 8000e78:	58d3      	ldr	r3, [r2, r3]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	029b      	lsls	r3, r3, #10
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e9a:	491e      	ldr	r1, [pc, #120]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e9c:	2284      	movs	r2, #132	; 0x84
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	035b      	lsls	r3, r3, #13
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	039b      	lsls	r3, r3, #14
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	40da      	lsrs	r2, r3
 8000f04:	1e13      	subs	r3, r2, #0
 8000f06:	d000      	beq.n	8000f0a <HAL_GPIO_Init+0x2ae>
 8000f08:	e6b0      	b.n	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b006      	add	sp, #24
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	40021800 	.word	0x40021800
 8000f18:	50000400 	.word	0x50000400
 8000f1c:	50000800 	.word	0x50000800
 8000f20:	50000c00 	.word	0x50000c00

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	0008      	movs	r0, r1
 8000f2e:	0011      	movs	r1, r2
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	1c02      	adds	r2, r0, #0
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	1c7b      	adds	r3, r7, #1
 8000f38:	1c0a      	adds	r2, r1, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3c:	1c7b      	adds	r3, r7, #1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	881a      	ldrh	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e003      	b.n	8000f56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	1cbb      	adds	r3, r7, #2
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e082      	b.n	8001078 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2241      	movs	r2, #65	; 0x41
 8000f76:	5c9b      	ldrb	r3, [r3, r2]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d107      	bne.n	8000f8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2240      	movs	r2, #64	; 0x40
 8000f82:	2100      	movs	r1, #0
 8000f84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f7ff fbfb 	bl	8000784 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2241      	movs	r2, #65	; 0x41
 8000f92:	2124      	movs	r1, #36	; 0x24
 8000f94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	438a      	bics	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4934      	ldr	r1, [pc, #208]	; (8001080 <HAL_I2C_Init+0x120>)
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4931      	ldr	r1, [pc, #196]	; (8001084 <HAL_I2C_Init+0x124>)
 8000fc0:	400a      	ands	r2, r1
 8000fc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	0209      	lsls	r1, r1, #8
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e007      	b.n	8000fee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2184      	movs	r1, #132	; 0x84
 8000fe8:	0209      	lsls	r1, r1, #8
 8000fea:	430a      	orrs	r2, r1
 8000fec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d104      	bne.n	8001000 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	491f      	ldr	r1, [pc, #124]	; (8001088 <HAL_I2C_Init+0x128>)
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	491a      	ldr	r1, [pc, #104]	; (8001084 <HAL_I2C_Init+0x124>)
 800101c:	400a      	ands	r2, r1
 800101e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	431a      	orrs	r2, r3
 800102a:	0011      	movs	r1, r2
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	021a      	lsls	r2, r3, #8
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69d9      	ldr	r1, [r3, #28]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1a      	ldr	r2, [r3, #32]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	430a      	orrs	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2241      	movs	r2, #65	; 0x41
 8001064:	2120      	movs	r1, #32
 8001066:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2242      	movs	r2, #66	; 0x42
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}
 8001080:	f0ffffff 	.word	0xf0ffffff
 8001084:	ffff7fff 	.word	0xffff7fff
 8001088:	02008000 	.word	0x02008000

0800108c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2241      	movs	r2, #65	; 0x41
 800109a:	5c9b      	ldrb	r3, [r3, r2]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b20      	cmp	r3, #32
 80010a0:	d138      	bne.n	8001114 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2240      	movs	r2, #64	; 0x40
 80010a6:	5c9b      	ldrb	r3, [r3, r2]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e032      	b.n	8001116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2240      	movs	r2, #64	; 0x40
 80010b4:	2101      	movs	r1, #1
 80010b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2241      	movs	r2, #65	; 0x41
 80010bc:	2124      	movs	r1, #36	; 0x24
 80010be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2101      	movs	r1, #1
 80010cc:	438a      	bics	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4911      	ldr	r1, [pc, #68]	; (8001120 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80010dc:	400a      	ands	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6819      	ldr	r1, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2101      	movs	r1, #1
 80010fc:	430a      	orrs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2241      	movs	r2, #65	; 0x41
 8001104:	2120      	movs	r1, #32
 8001106:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2240      	movs	r2, #64	; 0x40
 800110c:	2100      	movs	r1, #0
 800110e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	e000      	b.n	8001116 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001114:	2302      	movs	r3, #2
  }
}
 8001116:	0018      	movs	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	ffffefff 	.word	0xffffefff

08001124 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2241      	movs	r2, #65	; 0x41
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b20      	cmp	r3, #32
 8001138:	d139      	bne.n	80011ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	5c9b      	ldrb	r3, [r3, r2]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001144:	2302      	movs	r3, #2
 8001146:	e033      	b.n	80011b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2240      	movs	r2, #64	; 0x40
 800114c:	2101      	movs	r1, #1
 800114e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2241      	movs	r2, #65	; 0x41
 8001154:	2124      	movs	r1, #36	; 0x24
 8001156:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2241      	movs	r2, #65	; 0x41
 800119e:	2120      	movs	r1, #32
 80011a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2240      	movs	r2, #64	; 0x40
 80011a6:	2100      	movs	r1, #0
 80011a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011ae:	2302      	movs	r3, #2
  }
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b004      	add	sp, #16
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	fffff0ff 	.word	0xfffff0ff

080011bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011c4:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	0019      	movs	r1, r3
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d11f      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	0013      	movs	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	189b      	adds	r3, r3, r2
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4912      	ldr	r1, [pc, #72]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7fe ff86 	bl	8000100 <__udivsi3>
 80011f4:	0003      	movs	r3, r0
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011fa:	e008      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	e001      	b.n	800120e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e009      	b.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	401a      	ands	r2, r3
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	429a      	cmp	r2, r3
 800121e:	d0ed      	beq.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	0018      	movs	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	b004      	add	sp, #16
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	40007000 	.word	0x40007000
 8001230:	fffff9ff 	.word	0xfffff9ff
 8001234:	20000000 	.word	0x20000000
 8001238:	000f4240 	.word	0x000f4240

0800123c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	23e0      	movs	r3, #224	; 0xe0
 8001246:	01db      	lsls	r3, r3, #7
 8001248:	4013      	ands	r3, r2
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e2f9      	b.n	800185a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	4013      	ands	r3, r2
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x1e>
 8001270:	e07c      	b.n	800136c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001272:	4bc3      	ldr	r3, [pc, #780]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2238      	movs	r2, #56	; 0x38
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800127c:	4bc0      	ldr	r3, [pc, #768]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2203      	movs	r2, #3
 8001282:	4013      	ands	r3, r2
 8001284:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b10      	cmp	r3, #16
 800128a:	d102      	bne.n	8001292 <HAL_RCC_OscConfig+0x3e>
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d002      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	2b08      	cmp	r3, #8
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4bb9      	ldr	r3, [pc, #740]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	029b      	lsls	r3, r3, #10
 80012a0:	4013      	ands	r3, r2
 80012a2:	d062      	beq.n	800136a <HAL_RCC_OscConfig+0x116>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d15e      	bne.n	800136a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e2d4      	b.n	800185a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d107      	bne.n	80012cc <HAL_RCC_OscConfig+0x78>
 80012bc:	4bb0      	ldr	r3, [pc, #704]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4baf      	ldr	r3, [pc, #700]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0249      	lsls	r1, r1, #9
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e020      	b.n	800130e <HAL_RCC_OscConfig+0xba>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	23a0      	movs	r3, #160	; 0xa0
 80012d2:	02db      	lsls	r3, r3, #11
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d10e      	bne.n	80012f6 <HAL_RCC_OscConfig+0xa2>
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4ba8      	ldr	r3, [pc, #672]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	02c9      	lsls	r1, r1, #11
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4ba5      	ldr	r3, [pc, #660]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	0249      	lsls	r1, r1, #9
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	e00b      	b.n	800130e <HAL_RCC_OscConfig+0xba>
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4ba1      	ldr	r3, [pc, #644]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	49a1      	ldr	r1, [pc, #644]	; (8001584 <HAL_RCC_OscConfig+0x330>)
 80012fe:	400a      	ands	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	4b9f      	ldr	r3, [pc, #636]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001308:	499f      	ldr	r1, [pc, #636]	; (8001588 <HAL_RCC_OscConfig+0x334>)
 800130a:	400a      	ands	r2, r1
 800130c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d014      	beq.n	8001340 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fbe3 	bl	8000ae0 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fbde 	bl	8000ae0 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e293      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	029b      	lsls	r3, r3, #10
 800133a:	4013      	ands	r3, r2
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xcc>
 800133e:	e015      	b.n	800136c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fbce 	bl	8000ae0 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134a:	f7ff fbc9 	bl	8000ae0 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b64      	cmp	r3, #100	; 0x64
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e27e      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	029b      	lsls	r3, r3, #10
 8001364:	4013      	ands	r3, r2
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0xf6>
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_RCC_OscConfig+0x124>
 8001376:	e099      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2238      	movs	r2, #56	; 0x38
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001382:	4b7f      	ldr	r3, [pc, #508]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x144>
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d002      	beq.n	800139e <HAL_RCC_OscConfig+0x14a>
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d135      	bne.n	800140a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800139e:	4b78      	ldr	r3, [pc, #480]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	4013      	ands	r3, r2
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x162>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e251      	b.n	800185a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a74      	ldr	r2, [pc, #464]	; (800158c <HAL_RCC_OscConfig+0x338>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	021a      	lsls	r2, r3, #8
 80013c6:	4b6e      	ldr	r3, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d112      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013d2:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	; (8001590 <HAL_RCC_OscConfig+0x33c>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013e6:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	0adb      	lsrs	r3, r3, #11
 80013ec:	2207      	movs	r2, #7
 80013ee:	4013      	ands	r3, r2
 80013f0:	4a68      	ldr	r2, [pc, #416]	; (8001594 <HAL_RCC_OscConfig+0x340>)
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4b68      	ldr	r3, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x344>)
 80013f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x348>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff fb15 	bl	8000a2c <HAL_InitTick>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d051      	beq.n	80014aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e227      	b.n	800185a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d030      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x33c>)
 8001418:	4013      	ands	r3, r2
 800141a:	0019      	movs	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001422:	430a      	orrs	r2, r1
 8001424:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	0049      	lsls	r1, r1, #1
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb54 	bl	8000ae0 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143e:	f7ff fb4f 	bl	8000ae0 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e204      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_RCC_OscConfig+0x338>)
 8001462:	4013      	ands	r3, r2
 8001464:	0019      	movs	r1, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	021a      	lsls	r2, r3, #8
 800146c:	4b44      	ldr	r3, [pc, #272]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b41      	ldr	r3, [pc, #260]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800147a:	4949      	ldr	r1, [pc, #292]	; (80015a0 <HAL_RCC_OscConfig+0x34c>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fb2e 	bl	8000ae0 <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148a:	f7ff fb29 	bl	8000ae0 <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e1de      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2380      	movs	r3, #128	; 0x80
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x236>
 80014a8:	e000      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2208      	movs	r2, #8
 80014b2:	4013      	ands	r3, r2
 80014b4:	d047      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014b6:	4b32      	ldr	r3, [pc, #200]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2238      	movs	r2, #56	; 0x38
 80014bc:	4013      	ands	r3, r2
 80014be:	2b18      	cmp	r3, #24
 80014c0:	d10a      	bne.n	80014d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014c6:	2202      	movs	r2, #2
 80014c8:	4013      	ands	r3, r2
 80014ca:	d03c      	beq.n	8001546 <HAL_RCC_OscConfig+0x2f2>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d138      	bne.n	8001546 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e1c0      	b.n	800185a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d019      	beq.n	8001514 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014e4:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff faf8 	bl	8000ae0 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff faf3 	bl	8000ae0 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1a8      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2a2>
 8001512:	e018      	b.n	8001546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001516:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800151a:	2101      	movs	r1, #1
 800151c:	438a      	bics	r2, r1
 800151e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fade 	bl	8000ae0 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fad9 	bl	8000ae0 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e18e      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800153e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001540:	2202      	movs	r2, #2
 8001542:	4013      	ands	r3, r2
 8001544:	d1f1      	bne.n	800152a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2204      	movs	r2, #4
 800154c:	4013      	ands	r3, r2
 800154e:	d100      	bne.n	8001552 <HAL_RCC_OscConfig+0x2fe>
 8001550:	e0c6      	b.n	80016e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001552:	231f      	movs	r3, #31
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2238      	movs	r2, #56	; 0x38
 8001560:	4013      	ands	r3, r2
 8001562:	2b20      	cmp	r3, #32
 8001564:	d11e      	bne.n	80015a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x32c>)
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	2202      	movs	r2, #2
 800156c:	4013      	ands	r3, r2
 800156e:	d100      	bne.n	8001572 <HAL_RCC_OscConfig+0x31e>
 8001570:	e0b6      	b.n	80016e0 <HAL_RCC_OscConfig+0x48c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d000      	beq.n	800157c <HAL_RCC_OscConfig+0x328>
 800157a:	e0b1      	b.n	80016e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e16c      	b.n	800185a <HAL_RCC_OscConfig+0x606>
 8001580:	40021000 	.word	0x40021000
 8001584:	fffeffff 	.word	0xfffeffff
 8001588:	fffbffff 	.word	0xfffbffff
 800158c:	ffff80ff 	.word	0xffff80ff
 8001590:	ffffc7ff 	.word	0xffffc7ff
 8001594:	00f42400 	.word	0x00f42400
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004
 80015a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015a4:	4baf      	ldr	r3, [pc, #700]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80015a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	055b      	lsls	r3, r3, #21
 80015ac:	4013      	ands	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
 80015b0:	2301      	movs	r3, #1
 80015b2:	e000      	b.n	80015b6 <HAL_RCC_OscConfig+0x362>
 80015b4:	2300      	movs	r3, #0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d011      	beq.n	80015de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4baa      	ldr	r3, [pc, #680]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80015bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015be:	4ba9      	ldr	r3, [pc, #676]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0549      	lsls	r1, r1, #21
 80015c4:	430a      	orrs	r2, r1
 80015c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80015c8:	4ba6      	ldr	r3, [pc, #664]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80015ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80015d6:	231f      	movs	r3, #31
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4ba2      	ldr	r3, [pc, #648]	; (8001868 <HAL_RCC_OscConfig+0x614>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4013      	ands	r3, r2
 80015e8:	d11a      	bne.n	8001620 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4b9f      	ldr	r3, [pc, #636]	; (8001868 <HAL_RCC_OscConfig+0x614>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b9e      	ldr	r3, [pc, #632]	; (8001868 <HAL_RCC_OscConfig+0x614>)
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	0049      	lsls	r1, r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa72 	bl	8000ae0 <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff fa6d 	bl	8000ae0 <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e122      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001614:	4b94      	ldr	r3, [pc, #592]	; (8001868 <HAL_RCC_OscConfig+0x614>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4013      	ands	r3, r2
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x3e2>
 8001628:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800162a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162c:	4b8d      	ldr	r3, [pc, #564]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800162e:	2101      	movs	r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	65da      	str	r2, [r3, #92]	; 0x5c
 8001634:	e01c      	b.n	8001670 <HAL_RCC_OscConfig+0x41c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x404>
 800163e:	4b89      	ldr	r3, [pc, #548]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001644:	2104      	movs	r1, #4
 8001646:	430a      	orrs	r2, r1
 8001648:	65da      	str	r2, [r3, #92]	; 0x5c
 800164a:	4b86      	ldr	r3, [pc, #536]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800164c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800164e:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
 8001656:	e00b      	b.n	8001670 <HAL_RCC_OscConfig+0x41c>
 8001658:	4b82      	ldr	r3, [pc, #520]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800165a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	65da      	str	r2, [r3, #92]	; 0x5c
 8001664:	4b7f      	ldr	r3, [pc, #508]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001668:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800166a:	2104      	movs	r1, #4
 800166c:	438a      	bics	r2, r1
 800166e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d014      	beq.n	80016a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa32 	bl	8000ae0 <HAL_GetTick>
 800167c:	0003      	movs	r3, r0
 800167e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001680:	e009      	b.n	8001696 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff fa2d 	bl	8000ae0 <HAL_GetTick>
 8001686:	0002      	movs	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	4a77      	ldr	r2, [pc, #476]	; (800186c <HAL_RCC_OscConfig+0x618>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0e1      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001696:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x42e>
 80016a0:	e013      	b.n	80016ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fa1d 	bl	8000ae0 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016aa:	e009      	b.n	80016c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fa18 	bl	8000ae0 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a6d      	ldr	r2, [pc, #436]	; (800186c <HAL_RCC_OscConfig+0x618>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0cc      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c0:	4b68      	ldr	r3, [pc, #416]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016ca:	231f      	movs	r3, #31
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d105      	bne.n	80016e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016d4:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80016d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016d8:	4b62      	ldr	r3, [pc, #392]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80016da:	4965      	ldr	r1, [pc, #404]	; (8001870 <HAL_RCC_OscConfig+0x61c>)
 80016dc:	400a      	ands	r2, r1
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x496>
 80016e8:	e0b6      	b.n	8001858 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ea:	4b5e      	ldr	r3, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2238      	movs	r2, #56	; 0x38
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x4a4>
 80016f6:	e07e      	b.n	80017f6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d153      	bne.n	80017a8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b57      	ldr	r3, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001706:	495b      	ldr	r1, [pc, #364]	; (8001874 <HAL_RCC_OscConfig+0x620>)
 8001708:	400a      	ands	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f9e8 	bl	8000ae0 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001716:	f7ff f9e3 	bl	8000ae0 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e098      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	049b      	lsls	r3, r3, #18
 8001730:	4013      	ands	r3, r2
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_RCC_OscConfig+0x624>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001754:	431a      	orrs	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	431a      	orrs	r2, r3
 800175c:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800175e:	430a      	orrs	r2, r1
 8001760:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001762:	4b40      	ldr	r3, [pc, #256]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	0449      	lsls	r1, r1, #17
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001770:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	0549      	lsls	r1, r1, #21
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff f9af 	bl	8000ae0 <HAL_GetTick>
 8001782:	0003      	movs	r3, r0
 8001784:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001788:	f7ff f9aa 	bl	8000ae0 <HAL_GetTick>
 800178c:	0002      	movs	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e05f      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179a:	4b32      	ldr	r3, [pc, #200]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	049b      	lsls	r3, r3, #18
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0x534>
 80017a6:	e057      	b.n	8001858 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017ae:	4931      	ldr	r1, [pc, #196]	; (8001874 <HAL_RCC_OscConfig+0x620>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017ba:	2103      	movs	r1, #3
 80017bc:	438a      	bics	r2, r1
 80017be:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017c6:	492d      	ldr	r1, [pc, #180]	; (800187c <HAL_RCC_OscConfig+0x628>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f988 	bl	8000ae0 <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f983 	bl	8000ae0 <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e038      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	4b1e      	ldr	r3, [pc, #120]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	049b      	lsls	r3, r3, #18
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x582>
 80017f4:	e030      	b.n	8001858 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e02b      	b.n	800185a <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCC_OscConfig+0x610>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2203      	movs	r2, #3
 800180c:	401a      	ands	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	429a      	cmp	r2, r3
 8001814:	d11e      	bne.n	8001854 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2270      	movs	r2, #112	; 0x70
 800181a:	401a      	ands	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d117      	bne.n	8001854 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	23fe      	movs	r3, #254	; 0xfe
 8001828:	01db      	lsls	r3, r3, #7
 800182a:	401a      	ands	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d10e      	bne.n	8001854 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	23f8      	movs	r3, #248	; 0xf8
 800183a:	039b      	lsls	r3, r3, #14
 800183c:	401a      	ands	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	0f5b      	lsrs	r3, r3, #29
 800184a:	075a      	lsls	r2, r3, #29
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	0018      	movs	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	b008      	add	sp, #32
 8001860:	bd80      	pop	{r7, pc}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	40021000 	.word	0x40021000
 8001868:	40007000 	.word	0x40007000
 800186c:	00001388 	.word	0x00001388
 8001870:	efffffff 	.word	0xefffffff
 8001874:	feffffff 	.word	0xfeffffff
 8001878:	1fc1808c 	.word	0x1fc1808c
 800187c:	effeffff 	.word	0xeffeffff

08001880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0e9      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001894:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2207      	movs	r2, #7
 800189a:	4013      	ands	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d91e      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2207      	movs	r2, #7
 80018a8:	4393      	bics	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018b4:	f7ff f914 	bl	8000ae0 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018bc:	e009      	b.n	80018d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018be:	f7ff f90f 	bl	8000ae0 <HAL_GetTick>
 80018c2:	0002      	movs	r2, r0
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x1f4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e0ca      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018d2:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2207      	movs	r2, #7
 80018d8:	4013      	ands	r3, r2
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1ee      	bne.n	80018be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2202      	movs	r2, #2
 80018e6:	4013      	ands	r3, r2
 80018e8:	d015      	beq.n	8001916 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2204      	movs	r2, #4
 80018f0:	4013      	ands	r3, r2
 80018f2:	d006      	beq.n	8001902 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018f4:	4b60      	ldr	r3, [pc, #384]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 80018fa:	21e0      	movs	r1, #224	; 0xe0
 80018fc:	01c9      	lsls	r1, r1, #7
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001902:	4b5d      	ldr	r3, [pc, #372]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4a5d      	ldr	r2, [pc, #372]	; (8001a7c <HAL_RCC_ClockConfig+0x1fc>)
 8001908:	4013      	ands	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001912:	430a      	orrs	r2, r1
 8001914:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4013      	ands	r3, r2
 800191e:	d057      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	029b      	lsls	r3, r3, #10
 8001930:	4013      	ands	r3, r2
 8001932:	d12b      	bne.n	800198c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e097      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b02      	cmp	r3, #2
 800193e:	d107      	bne.n	8001950 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	049b      	lsls	r3, r3, #18
 8001948:	4013      	ands	r3, r2
 800194a:	d11f      	bne.n	800198c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e08b      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4013      	ands	r3, r2
 8001962:	d113      	bne.n	800198c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e07f      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d106      	bne.n	800197e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001970:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d108      	bne.n	800198c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e074      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800197e:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e06d      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800198c:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2207      	movs	r2, #7
 8001992:	4393      	bics	r3, r2
 8001994:	0019      	movs	r1, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 800199c:	430a      	orrs	r2, r1
 800199e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a0:	f7ff f89e 	bl	8000ae0 <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a8:	e009      	b.n	80019be <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019aa:	f7ff f899 	bl	8000ae0 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <HAL_RCC_ClockConfig+0x1f4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e054      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2238      	movs	r2, #56	; 0x38
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1ec      	bne.n	80019aa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2207      	movs	r2, #7
 80019d6:	4013      	ands	r3, r2
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d21e      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2207      	movs	r2, #7
 80019e4:	4393      	bics	r3, r2
 80019e6:	0019      	movs	r1, r3
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019f0:	f7ff f876 	bl	8000ae0 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019f8:	e009      	b.n	8001a0e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fa:	f7ff f871 	bl	8000ae0 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	4a1b      	ldr	r2, [pc, #108]	; (8001a74 <HAL_RCC_ClockConfig+0x1f4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e02c      	b.n	8001a68 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2207      	movs	r2, #7
 8001a14:	4013      	ands	r3, r2
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d1ee      	bne.n	80019fa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2204      	movs	r2, #4
 8001a22:	4013      	ands	r3, r2
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_RCC_ClockConfig+0x200>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a3a:	f000 f829 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 8001a3e:	0001      	movs	r1, r0
 8001a40:	4b0d      	ldr	r3, [pc, #52]	; (8001a78 <HAL_RCC_ClockConfig+0x1f8>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	220f      	movs	r2, #15
 8001a48:	401a      	ands	r2, r3
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_RCC_ClockConfig+0x204>)
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	58d3      	ldr	r3, [r2, r3]
 8001a50:	221f      	movs	r2, #31
 8001a52:	4013      	ands	r3, r2
 8001a54:	000a      	movs	r2, r1
 8001a56:	40da      	lsrs	r2, r3
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x208>)
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_RCC_ClockConfig+0x20c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe ffe3 	bl	8000a2c <HAL_InitTick>
 8001a66:	0003      	movs	r3, r0
}
 8001a68:	0018      	movs	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40022000 	.word	0x40022000
 8001a74:	00001388 	.word	0x00001388
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	fffff0ff 	.word	0xfffff0ff
 8001a80:	ffff8fff 	.word	0xffff8fff
 8001a84:	08002e90 	.word	0x08002e90
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000004 	.word	0x20000004

08001a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a96:	4b3c      	ldr	r3, [pc, #240]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2238      	movs	r2, #56	; 0x38
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001aa0:	4b39      	ldr	r3, [pc, #228]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	0adb      	lsrs	r3, r3, #11
 8001aa6:	2207      	movs	r2, #7
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2201      	movs	r2, #1
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ab2:	6839      	ldr	r1, [r7, #0]
 8001ab4:	4835      	ldr	r0, [pc, #212]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ab6:	f7fe fb23 	bl	8000100 <__udivsi3>
 8001aba:	0003      	movs	r3, r0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	e05d      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2238      	movs	r2, #56	; 0x38
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d102      	bne.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001acc:	4b30      	ldr	r3, [pc, #192]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	e054      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2238      	movs	r2, #56	; 0x38
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d138      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ade:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ae8:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	2207      	movs	r2, #7
 8001af0:	4013      	ands	r3, r2
 8001af2:	3301      	adds	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d10d      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	4824      	ldr	r0, [pc, #144]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x100>)
 8001b00:	f7fe fafe 	bl	8000100 <__udivsi3>
 8001b04:	0003      	movs	r3, r0
 8001b06:	0019      	movs	r1, r3
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	227f      	movs	r2, #127	; 0x7f
 8001b10:	4013      	ands	r3, r2
 8001b12:	434b      	muls	r3, r1
 8001b14:	617b      	str	r3, [r7, #20]
        break;
 8001b16:	e00d      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	481c      	ldr	r0, [pc, #112]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b1c:	f7fe faf0 	bl	8000100 <__udivsi3>
 8001b20:	0003      	movs	r3, r0
 8001b22:	0019      	movs	r1, r3
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	227f      	movs	r2, #127	; 0x7f
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	434b      	muls	r3, r1
 8001b30:	617b      	str	r3, [r7, #20]
        break;
 8001b32:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b34:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0f5b      	lsrs	r3, r3, #29
 8001b3a:	2207      	movs	r2, #7
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	3301      	adds	r3, #1
 8001b40:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	6978      	ldr	r0, [r7, #20]
 8001b46:	f7fe fadb 	bl	8000100 <__udivsi3>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	e015      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b50:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2238      	movs	r2, #56	; 0x38
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d103      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	021b      	lsls	r3, r3, #8
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2238      	movs	r2, #56	; 0x38
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b18      	cmp	r3, #24
 8001b6e:	d103      	bne.n	8001b78 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b70:	23fa      	movs	r3, #250	; 0xfa
 8001b72:	01db      	lsls	r3, r3, #7
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	e001      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b7c:	693b      	ldr	r3, [r7, #16]
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b006      	add	sp, #24
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	00f42400 	.word	0x00f42400
 8001b90:	007a1200 	.word	0x007a1200

08001b94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b02      	ldr	r3, [pc, #8]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0004      	movs	r4, r0
 8001bb2:	f7ff fb43 	bl	800123c <LL_RCC_GetAPB1Prescaler>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	0b1a      	lsrs	r2, r3, #12
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	58d3      	ldr	r3, [r2, r3]
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	40dc      	lsrs	r4, r3
 8001bc6:	0023      	movs	r3, r4
}
 8001bc8:	0018      	movs	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	08002ed0 	.word	0x08002ed0

08001bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bdc:	2313      	movs	r3, #19
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001be4:	2312      	movs	r3, #18
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	029b      	lsls	r3, r3, #10
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001bf8:	e0a4      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfa:	2311      	movs	r3, #17
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b87      	ldr	r3, [pc, #540]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	055b      	lsls	r3, r3, #21
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d111      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b84      	ldr	r3, [pc, #528]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c12:	4b83      	ldr	r3, [pc, #524]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c14:	2180      	movs	r1, #128	; 0x80
 8001c16:	0549      	lsls	r1, r1, #21
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	055b      	lsls	r3, r3, #21
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2311      	movs	r3, #17
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c32:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0049      	lsls	r1, r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c40:	f7fe ff4e 	bl	8000ae0 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c48:	e00b      	b.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4a:	f7fe ff49 	bl	8000ae0 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d904      	bls.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001c58:	2313      	movs	r3, #19
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	701a      	strb	r2, [r3, #0]
        break;
 8001c60:	e005      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c62:	4b70      	ldr	r3, [pc, #448]	; (8001e24 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d0ed      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001c6e:	2313      	movs	r3, #19
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d154      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c78:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c7c:	23c0      	movs	r3, #192	; 0xc0
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4013      	ands	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d019      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d014      	beq.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c94:	4b62      	ldr	r3, [pc, #392]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	4a63      	ldr	r2, [pc, #396]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c9e:	4b60      	ldr	r3, [pc, #384]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca2:	4b5f      	ldr	r3, [pc, #380]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0249      	lsls	r1, r1, #9
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cac:	4b5c      	ldr	r3, [pc, #368]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cb2:	495e      	ldr	r1, [pc, #376]	; (8001e2c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d016      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ff0b 	bl	8000ae0 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cce:	e00c      	b.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd0:	f7fe ff06 	bl	8000ae0 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d904      	bls.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001ce0:	2313      	movs	r3, #19
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2203      	movs	r2, #3
 8001ce6:	701a      	strb	r2, [r3, #0]
            break;
 8001ce8:	e004      	b.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b4d      	ldr	r3, [pc, #308]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0ed      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001cf4:	2313      	movs	r3, #19
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10a      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cfe:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	0019      	movs	r1, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d12:	e00c      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d14:	2312      	movs	r3, #18
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2213      	movs	r2, #19
 8001d1a:	18ba      	adds	r2, r7, r2
 8001d1c:	7812      	ldrb	r2, [r2, #0]
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e005      	b.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d22:	2312      	movs	r3, #18
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	2213      	movs	r2, #19
 8001d28:	18ba      	adds	r2, r7, r2
 8001d2a:	7812      	ldrb	r2, [r2, #0]
 8001d2c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2e:	2311      	movs	r3, #17
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d3c:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d3e:	493d      	ldr	r1, [pc, #244]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d4e:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	2203      	movs	r2, #3
 8001d54:	4393      	bics	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d6c:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	220c      	movs	r2, #12
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2240      	movs	r2, #64	; 0x40
 8001d86:	4013      	ands	r3, r2
 8001d88:	d009      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	4a2a      	ldr	r2, [pc, #168]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	01db      	lsls	r3, r3, #7
 8001da6:	4013      	ands	r3, r2
 8001da8:	d015      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	0899      	lsrs	r1, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	05db      	lsls	r3, r3, #23
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	0249      	lsls	r1, r1, #9
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	4013      	ands	r3, r2
 8001de0:	d016      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001df2:	430a      	orrs	r2, r1
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	01db      	lsls	r3, r3, #7
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d106      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	0249      	lsls	r1, r1, #9
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8001e10:	2312      	movs	r3, #18
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	781b      	ldrb	r3, [r3, #0]
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b006      	add	sp, #24
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40007000 	.word	0x40007000
 8001e28:	fffffcff 	.word	0xfffffcff
 8001e2c:	fffeffff 	.word	0xfffeffff
 8001e30:	00001388 	.word	0x00001388
 8001e34:	efffffff 	.word	0xefffffff
 8001e38:	ffffcfff 	.word	0xffffcfff
 8001e3c:	ffff3fff 	.word	0xffff3fff

08001e40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e08a      	b.n	8001f68 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	225d      	movs	r2, #93	; 0x5d
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d107      	bne.n	8001e74 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	225c      	movs	r2, #92	; 0x5c
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7fe fcd4 	bl	800081c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	225d      	movs	r2, #93	; 0x5d
 8001e78:	2102      	movs	r1, #2
 8001e7a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2140      	movs	r1, #64	; 0x40
 8001e88:	438a      	bics	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	23e0      	movs	r3, #224	; 0xe0
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d902      	bls.n	8001e9e <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e002      	b.n	8001ea4 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	015b      	lsls	r3, r3, #5
 8001ea2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	23f0      	movs	r3, #240	; 0xf0
 8001eaa:	011b      	lsls	r3, r3, #4
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d008      	beq.n	8001ec2 <HAL_SPI_Init+0x82>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	23e0      	movs	r3, #224	; 0xe0
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d002      	beq.n	8001ec2 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	23e0      	movs	r3, #224	; 0xe0
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d903      	bls.n	8001ede <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
 8001edc:	e002      	b.n	8001ee4 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6999      	ldr	r1, [r3, #24]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	400b      	ands	r3, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	2204      	movs	r2, #4
 8001f28:	401a      	ands	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	0011      	movs	r1, r2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69da      	ldr	r2, [r3, #28]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4907      	ldr	r1, [pc, #28]	; (8001f70 <HAL_SPI_Init+0x130>)
 8001f54:	400a      	ands	r2, r1
 8001f56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	225d      	movs	r2, #93	; 0x5d
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b004      	add	sp, #16
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	fffff7ff 	.word	0xfffff7ff

08001f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e046      	b.n	8002014 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	589b      	ldr	r3, [r3, r2]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	227c      	movs	r2, #124	; 0x7c
 8001f94:	2100      	movs	r1, #0
 8001f96:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7fe fc8a 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	2124      	movs	r1, #36	; 0x24
 8001fa6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 f830 	bl	8002020 <UART_SetConfig>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e024      	b.n	8002014 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 fcab 	bl	8002930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	490d      	ldr	r1, [pc, #52]	; (800201c <HAL_UART_Init+0xa8>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	212a      	movs	r1, #42	; 0x2a
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fd43 	bl	8002a98 <UART_CheckIdleState>
 8002012:	0003      	movs	r3, r0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}
 800201c:	ffffb7ff 	.word	0xffffb7ff

08002020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800202c:	231e      	movs	r3, #30
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4aba      	ldr	r2, [pc, #744]	; (800234c <UART_SetConfig+0x32c>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4ab6      	ldr	r2, [pc, #728]	; (8002350 <UART_SetConfig+0x330>)
 8002078:	4013      	ands	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4aad      	ldr	r2, [pc, #692]	; (8002354 <UART_SetConfig+0x334>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	220f      	movs	r2, #15
 80020b6:	4393      	bics	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4aa3      	ldr	r2, [pc, #652]	; (8002358 <UART_SetConfig+0x338>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d125      	bne.n	800211c <UART_SetConfig+0xfc>
 80020d0:	4ba2      	ldr	r3, [pc, #648]	; (800235c <UART_SetConfig+0x33c>)
 80020d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d4:	2203      	movs	r2, #3
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d00f      	beq.n	80020fc <UART_SetConfig+0xdc>
 80020dc:	d304      	bcc.n	80020e8 <UART_SetConfig+0xc8>
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d007      	beq.n	80020f2 <UART_SetConfig+0xd2>
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d00f      	beq.n	8002106 <UART_SetConfig+0xe6>
 80020e6:	e013      	b.n	8002110 <UART_SetConfig+0xf0>
 80020e8:	231f      	movs	r3, #31
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e05a      	b.n	80021a8 <UART_SetConfig+0x188>
 80020f2:	231f      	movs	r3, #31
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2202      	movs	r2, #2
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	e055      	b.n	80021a8 <UART_SetConfig+0x188>
 80020fc:	231f      	movs	r3, #31
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2204      	movs	r2, #4
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e050      	b.n	80021a8 <UART_SetConfig+0x188>
 8002106:	231f      	movs	r3, #31
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	2208      	movs	r2, #8
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	e04b      	b.n	80021a8 <UART_SetConfig+0x188>
 8002110:	231f      	movs	r3, #31
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2210      	movs	r2, #16
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	e045      	b.n	80021a8 <UART_SetConfig+0x188>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a8f      	ldr	r2, [pc, #572]	; (8002360 <UART_SetConfig+0x340>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d128      	bne.n	8002178 <UART_SetConfig+0x158>
 8002126:	4b8d      	ldr	r3, [pc, #564]	; (800235c <UART_SetConfig+0x33c>)
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	220c      	movs	r2, #12
 800212c:	4013      	ands	r3, r2
 800212e:	2b04      	cmp	r3, #4
 8002130:	d012      	beq.n	8002158 <UART_SetConfig+0x138>
 8002132:	d802      	bhi.n	800213a <UART_SetConfig+0x11a>
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <UART_SetConfig+0x124>
 8002138:	e018      	b.n	800216c <UART_SetConfig+0x14c>
 800213a:	2b08      	cmp	r3, #8
 800213c:	d007      	beq.n	800214e <UART_SetConfig+0x12e>
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d00f      	beq.n	8002162 <UART_SetConfig+0x142>
 8002142:	e013      	b.n	800216c <UART_SetConfig+0x14c>
 8002144:	231f      	movs	r3, #31
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e02c      	b.n	80021a8 <UART_SetConfig+0x188>
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	2202      	movs	r2, #2
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e027      	b.n	80021a8 <UART_SetConfig+0x188>
 8002158:	231f      	movs	r3, #31
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2204      	movs	r2, #4
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e022      	b.n	80021a8 <UART_SetConfig+0x188>
 8002162:	231f      	movs	r3, #31
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2208      	movs	r2, #8
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e01d      	b.n	80021a8 <UART_SetConfig+0x188>
 800216c:	231f      	movs	r3, #31
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2210      	movs	r2, #16
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	e017      	b.n	80021a8 <UART_SetConfig+0x188>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a79      	ldr	r2, [pc, #484]	; (8002364 <UART_SetConfig+0x344>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d104      	bne.n	800218c <UART_SetConfig+0x16c>
 8002182:	231f      	movs	r3, #31
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e00d      	b.n	80021a8 <UART_SetConfig+0x188>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a75      	ldr	r2, [pc, #468]	; (8002368 <UART_SetConfig+0x348>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d104      	bne.n	80021a0 <UART_SetConfig+0x180>
 8002196:	231f      	movs	r3, #31
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e003      	b.n	80021a8 <UART_SetConfig+0x188>
 80021a0:	231f      	movs	r3, #31
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2210      	movs	r2, #16
 80021a6:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d000      	beq.n	80021b6 <UART_SetConfig+0x196>
 80021b4:	e1de      	b.n	8002574 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 80021b6:	231f      	movs	r3, #31
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d100      	bne.n	80021c2 <UART_SetConfig+0x1a2>
 80021c0:	e06c      	b.n	800229c <UART_SetConfig+0x27c>
 80021c2:	dc02      	bgt.n	80021ca <UART_SetConfig+0x1aa>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <UART_SetConfig+0x1b8>
 80021c8:	e1ab      	b.n	8002522 <UART_SetConfig+0x502>
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d100      	bne.n	80021d0 <UART_SetConfig+0x1b0>
 80021ce:	e0e5      	b.n	800239c <UART_SetConfig+0x37c>
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d100      	bne.n	80021d6 <UART_SetConfig+0x1b6>
 80021d4:	e144      	b.n	8002460 <UART_SetConfig+0x440>
 80021d6:	e1a4      	b.n	8002522 <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021d8:	f7ff fce6 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 80021dc:	0003      	movs	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d044      	beq.n	8002272 <UART_SetConfig+0x252>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d03e      	beq.n	800226e <UART_SetConfig+0x24e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d038      	beq.n	800226a <UART_SetConfig+0x24a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d032      	beq.n	8002266 <UART_SetConfig+0x246>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b04      	cmp	r3, #4
 8002206:	d02c      	beq.n	8002262 <UART_SetConfig+0x242>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	2b05      	cmp	r3, #5
 800220e:	d026      	beq.n	800225e <UART_SetConfig+0x23e>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b06      	cmp	r3, #6
 8002216:	d020      	beq.n	800225a <UART_SetConfig+0x23a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2b07      	cmp	r3, #7
 800221e:	d01a      	beq.n	8002256 <UART_SetConfig+0x236>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	2b08      	cmp	r3, #8
 8002226:	d014      	beq.n	8002252 <UART_SetConfig+0x232>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	2b09      	cmp	r3, #9
 800222e:	d00e      	beq.n	800224e <UART_SetConfig+0x22e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b0a      	cmp	r3, #10
 8002236:	d008      	beq.n	800224a <UART_SetConfig+0x22a>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	2b0b      	cmp	r3, #11
 800223e:	d102      	bne.n	8002246 <UART_SetConfig+0x226>
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	e016      	b.n	8002274 <UART_SetConfig+0x254>
 8002246:	2301      	movs	r3, #1
 8002248:	e014      	b.n	8002274 <UART_SetConfig+0x254>
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	e012      	b.n	8002274 <UART_SetConfig+0x254>
 800224e:	2340      	movs	r3, #64	; 0x40
 8002250:	e010      	b.n	8002274 <UART_SetConfig+0x254>
 8002252:	2320      	movs	r3, #32
 8002254:	e00e      	b.n	8002274 <UART_SetConfig+0x254>
 8002256:	2310      	movs	r3, #16
 8002258:	e00c      	b.n	8002274 <UART_SetConfig+0x254>
 800225a:	230c      	movs	r3, #12
 800225c:	e00a      	b.n	8002274 <UART_SetConfig+0x254>
 800225e:	230a      	movs	r3, #10
 8002260:	e008      	b.n	8002274 <UART_SetConfig+0x254>
 8002262:	2308      	movs	r3, #8
 8002264:	e006      	b.n	8002274 <UART_SetConfig+0x254>
 8002266:	2306      	movs	r3, #6
 8002268:	e004      	b.n	8002274 <UART_SetConfig+0x254>
 800226a:	2304      	movs	r3, #4
 800226c:	e002      	b.n	8002274 <UART_SetConfig+0x254>
 800226e:	2302      	movs	r3, #2
 8002270:	e000      	b.n	8002274 <UART_SetConfig+0x254>
 8002272:	2301      	movs	r3, #1
 8002274:	0019      	movs	r1, r3
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fd ff42 	bl	8000100 <__udivsi3>
 800227c:	0003      	movs	r3, r0
 800227e:	005a      	lsls	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	18d2      	adds	r2, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	0019      	movs	r1, r3
 800228e:	0010      	movs	r0, r2
 8002290:	f7fd ff36 	bl	8000100 <__udivsi3>
 8002294:	0003      	movs	r3, r0
 8002296:	b29b      	uxth	r3, r3
 8002298:	617b      	str	r3, [r7, #20]
        break;
 800229a:	e147      	b.n	800252c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d043      	beq.n	800232c <UART_SetConfig+0x30c>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d03d      	beq.n	8002328 <UART_SetConfig+0x308>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d037      	beq.n	8002324 <UART_SetConfig+0x304>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d031      	beq.n	8002320 <UART_SetConfig+0x300>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d02b      	beq.n	800231c <UART_SetConfig+0x2fc>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	2b05      	cmp	r3, #5
 80022ca:	d025      	beq.n	8002318 <UART_SetConfig+0x2f8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2b06      	cmp	r3, #6
 80022d2:	d01f      	beq.n	8002314 <UART_SetConfig+0x2f4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	2b07      	cmp	r3, #7
 80022da:	d019      	beq.n	8002310 <UART_SetConfig+0x2f0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d013      	beq.n	800230c <UART_SetConfig+0x2ec>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b09      	cmp	r3, #9
 80022ea:	d00d      	beq.n	8002308 <UART_SetConfig+0x2e8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	2b0a      	cmp	r3, #10
 80022f2:	d007      	beq.n	8002304 <UART_SetConfig+0x2e4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	2b0b      	cmp	r3, #11
 80022fa:	d101      	bne.n	8002300 <UART_SetConfig+0x2e0>
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <UART_SetConfig+0x34c>)
 80022fe:	e016      	b.n	800232e <UART_SetConfig+0x30e>
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <UART_SetConfig+0x350>)
 8002302:	e014      	b.n	800232e <UART_SetConfig+0x30e>
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <UART_SetConfig+0x354>)
 8002306:	e012      	b.n	800232e <UART_SetConfig+0x30e>
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <UART_SetConfig+0x358>)
 800230a:	e010      	b.n	800232e <UART_SetConfig+0x30e>
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <UART_SetConfig+0x35c>)
 800230e:	e00e      	b.n	800232e <UART_SetConfig+0x30e>
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <UART_SetConfig+0x360>)
 8002312:	e00c      	b.n	800232e <UART_SetConfig+0x30e>
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <UART_SetConfig+0x364>)
 8002316:	e00a      	b.n	800232e <UART_SetConfig+0x30e>
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <UART_SetConfig+0x368>)
 800231a:	e008      	b.n	800232e <UART_SetConfig+0x30e>
 800231c:	4b1b      	ldr	r3, [pc, #108]	; (800238c <UART_SetConfig+0x36c>)
 800231e:	e006      	b.n	800232e <UART_SetConfig+0x30e>
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <UART_SetConfig+0x370>)
 8002322:	e004      	b.n	800232e <UART_SetConfig+0x30e>
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <UART_SetConfig+0x374>)
 8002326:	e002      	b.n	800232e <UART_SetConfig+0x30e>
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <UART_SetConfig+0x378>)
 800232a:	e000      	b.n	800232e <UART_SetConfig+0x30e>
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <UART_SetConfig+0x350>)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6852      	ldr	r2, [r2, #4]
 8002332:	0852      	lsrs	r2, r2, #1
 8002334:	189a      	adds	r2, r3, r2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	0019      	movs	r1, r3
 800233c:	0010      	movs	r0, r2
 800233e:	f7fd fedf 	bl	8000100 <__udivsi3>
 8002342:	0003      	movs	r3, r0
 8002344:	b29b      	uxth	r3, r3
 8002346:	617b      	str	r3, [r7, #20]
        break;
 8002348:	e0f0      	b.n	800252c <UART_SetConfig+0x50c>
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	cfff69f3 	.word	0xcfff69f3
 8002350:	ffffcfff 	.word	0xffffcfff
 8002354:	11fff4ff 	.word	0x11fff4ff
 8002358:	40013800 	.word	0x40013800
 800235c:	40021000 	.word	0x40021000
 8002360:	40004400 	.word	0x40004400
 8002364:	40004800 	.word	0x40004800
 8002368:	40004c00 	.word	0x40004c00
 800236c:	0001e848 	.word	0x0001e848
 8002370:	01e84800 	.word	0x01e84800
 8002374:	0003d090 	.word	0x0003d090
 8002378:	0007a120 	.word	0x0007a120
 800237c:	000f4240 	.word	0x000f4240
 8002380:	001e8480 	.word	0x001e8480
 8002384:	0028b0aa 	.word	0x0028b0aa
 8002388:	0030d400 	.word	0x0030d400
 800238c:	003d0900 	.word	0x003d0900
 8002390:	00516154 	.word	0x00516154
 8002394:	007a1200 	.word	0x007a1200
 8002398:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800239c:	f7ff fb78 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 80023a0:	0003      	movs	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d044      	beq.n	8002436 <UART_SetConfig+0x416>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d03e      	beq.n	8002432 <UART_SetConfig+0x412>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d038      	beq.n	800242e <UART_SetConfig+0x40e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d032      	beq.n	800242a <UART_SetConfig+0x40a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d02c      	beq.n	8002426 <UART_SetConfig+0x406>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d026      	beq.n	8002422 <UART_SetConfig+0x402>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	2b06      	cmp	r3, #6
 80023da:	d020      	beq.n	800241e <UART_SetConfig+0x3fe>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	d01a      	beq.n	800241a <UART_SetConfig+0x3fa>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d014      	beq.n	8002416 <UART_SetConfig+0x3f6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	d00e      	beq.n	8002412 <UART_SetConfig+0x3f2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	2b0a      	cmp	r3, #10
 80023fa:	d008      	beq.n	800240e <UART_SetConfig+0x3ee>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b0b      	cmp	r3, #11
 8002402:	d102      	bne.n	800240a <UART_SetConfig+0x3ea>
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	e016      	b.n	8002438 <UART_SetConfig+0x418>
 800240a:	2301      	movs	r3, #1
 800240c:	e014      	b.n	8002438 <UART_SetConfig+0x418>
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	e012      	b.n	8002438 <UART_SetConfig+0x418>
 8002412:	2340      	movs	r3, #64	; 0x40
 8002414:	e010      	b.n	8002438 <UART_SetConfig+0x418>
 8002416:	2320      	movs	r3, #32
 8002418:	e00e      	b.n	8002438 <UART_SetConfig+0x418>
 800241a:	2310      	movs	r3, #16
 800241c:	e00c      	b.n	8002438 <UART_SetConfig+0x418>
 800241e:	230c      	movs	r3, #12
 8002420:	e00a      	b.n	8002438 <UART_SetConfig+0x418>
 8002422:	230a      	movs	r3, #10
 8002424:	e008      	b.n	8002438 <UART_SetConfig+0x418>
 8002426:	2308      	movs	r3, #8
 8002428:	e006      	b.n	8002438 <UART_SetConfig+0x418>
 800242a:	2306      	movs	r3, #6
 800242c:	e004      	b.n	8002438 <UART_SetConfig+0x418>
 800242e:	2304      	movs	r3, #4
 8002430:	e002      	b.n	8002438 <UART_SetConfig+0x418>
 8002432:	2302      	movs	r3, #2
 8002434:	e000      	b.n	8002438 <UART_SetConfig+0x418>
 8002436:	2301      	movs	r3, #1
 8002438:	0019      	movs	r1, r3
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7fd fe60 	bl	8000100 <__udivsi3>
 8002440:	0003      	movs	r3, r0
 8002442:	005a      	lsls	r2, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	18d2      	adds	r2, r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0019      	movs	r1, r3
 8002452:	0010      	movs	r0, r2
 8002454:	f7fd fe54 	bl	8000100 <__udivsi3>
 8002458:	0003      	movs	r3, r0
 800245a:	b29b      	uxth	r3, r3
 800245c:	617b      	str	r3, [r7, #20]
        break;
 800245e:	e065      	b.n	800252c <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d04c      	beq.n	8002502 <UART_SetConfig+0x4e2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d045      	beq.n	80024fc <UART_SetConfig+0x4dc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	2b02      	cmp	r3, #2
 8002476:	d03e      	beq.n	80024f6 <UART_SetConfig+0x4d6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	2b03      	cmp	r3, #3
 800247e:	d038      	beq.n	80024f2 <UART_SetConfig+0x4d2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	2b04      	cmp	r3, #4
 8002486:	d031      	beq.n	80024ec <UART_SetConfig+0x4cc>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	2b05      	cmp	r3, #5
 800248e:	d02b      	beq.n	80024e8 <UART_SetConfig+0x4c8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2b06      	cmp	r3, #6
 8002496:	d025      	beq.n	80024e4 <UART_SetConfig+0x4c4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	2b07      	cmp	r3, #7
 800249e:	d01e      	beq.n	80024de <UART_SetConfig+0x4be>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d017      	beq.n	80024d8 <UART_SetConfig+0x4b8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b09      	cmp	r3, #9
 80024ae:	d010      	beq.n	80024d2 <UART_SetConfig+0x4b2>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	2b0a      	cmp	r3, #10
 80024b6:	d009      	beq.n	80024cc <UART_SetConfig+0x4ac>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b0b      	cmp	r3, #11
 80024be:	d102      	bne.n	80024c6 <UART_SetConfig+0x4a6>
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	e01f      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024c6:	2380      	movs	r3, #128	; 0x80
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	e01c      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	e019      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	e016      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	e013      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	015b      	lsls	r3, r3, #5
 80024e2:	e010      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024e4:	4bb9      	ldr	r3, [pc, #740]	; (80027cc <UART_SetConfig+0x7ac>)
 80024e6:	e00e      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024e8:	4bb9      	ldr	r3, [pc, #740]	; (80027d0 <UART_SetConfig+0x7b0>)
 80024ea:	e00c      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	019b      	lsls	r3, r3, #6
 80024f0:	e009      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024f2:	4bb8      	ldr	r3, [pc, #736]	; (80027d4 <UART_SetConfig+0x7b4>)
 80024f4:	e007      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	01db      	lsls	r3, r3, #7
 80024fa:	e004      	b.n	8002506 <UART_SetConfig+0x4e6>
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	e001      	b.n	8002506 <UART_SetConfig+0x4e6>
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6852      	ldr	r2, [r2, #4]
 800250a:	0852      	lsrs	r2, r2, #1
 800250c:	189a      	adds	r2, r3, r2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f7fd fdf3 	bl	8000100 <__udivsi3>
 800251a:	0003      	movs	r3, r0
 800251c:	b29b      	uxth	r3, r3
 800251e:	617b      	str	r3, [r7, #20]
        break;
 8002520:	e004      	b.n	800252c <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 8002522:	231e      	movs	r3, #30
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
        break;
 800252a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b0f      	cmp	r3, #15
 8002530:	d91b      	bls.n	800256a <UART_SetConfig+0x54a>
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4aa8      	ldr	r2, [pc, #672]	; (80027d8 <UART_SetConfig+0x7b8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d817      	bhi.n	800256a <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	b29a      	uxth	r2, r3
 800253e:	200a      	movs	r0, #10
 8002540:	183b      	adds	r3, r7, r0
 8002542:	210f      	movs	r1, #15
 8002544:	438a      	bics	r2, r1
 8002546:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	b29b      	uxth	r3, r3
 800254e:	2207      	movs	r2, #7
 8002550:	4013      	ands	r3, r2
 8002552:	b299      	uxth	r1, r3
 8002554:	183b      	adds	r3, r7, r0
 8002556:	183a      	adds	r2, r7, r0
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	183a      	adds	r2, r7, r0
 8002564:	8812      	ldrh	r2, [r2, #0]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	e1c5      	b.n	80028f6 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800256a:	231e      	movs	r3, #30
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e1c0      	b.n	80028f6 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8002574:	231f      	movs	r3, #31
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d100      	bne.n	8002580 <UART_SetConfig+0x560>
 800257e:	e06c      	b.n	800265a <UART_SetConfig+0x63a>
 8002580:	dc02      	bgt.n	8002588 <UART_SetConfig+0x568>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <UART_SetConfig+0x576>
 8002586:	e1a1      	b.n	80028cc <UART_SetConfig+0x8ac>
 8002588:	2b04      	cmp	r3, #4
 800258a:	d100      	bne.n	800258e <UART_SetConfig+0x56e>
 800258c:	e0bc      	b.n	8002708 <UART_SetConfig+0x6e8>
 800258e:	2b08      	cmp	r3, #8
 8002590:	d100      	bne.n	8002594 <UART_SetConfig+0x574>
 8002592:	e13b      	b.n	800280c <UART_SetConfig+0x7ec>
 8002594:	e19a      	b.n	80028cc <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002596:	f7ff fb07 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 800259a:	0003      	movs	r3, r0
 800259c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d044      	beq.n	8002630 <UART_SetConfig+0x610>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d03e      	beq.n	800262c <UART_SetConfig+0x60c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d038      	beq.n	8002628 <UART_SetConfig+0x608>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	d032      	beq.n	8002624 <UART_SetConfig+0x604>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d02c      	beq.n	8002620 <UART_SetConfig+0x600>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d026      	beq.n	800261c <UART_SetConfig+0x5fc>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d020      	beq.n	8002618 <UART_SetConfig+0x5f8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b07      	cmp	r3, #7
 80025dc:	d01a      	beq.n	8002614 <UART_SetConfig+0x5f4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d014      	beq.n	8002610 <UART_SetConfig+0x5f0>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d00e      	beq.n	800260c <UART_SetConfig+0x5ec>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	2b0a      	cmp	r3, #10
 80025f4:	d008      	beq.n	8002608 <UART_SetConfig+0x5e8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	2b0b      	cmp	r3, #11
 80025fc:	d102      	bne.n	8002604 <UART_SetConfig+0x5e4>
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	e016      	b.n	8002632 <UART_SetConfig+0x612>
 8002604:	2301      	movs	r3, #1
 8002606:	e014      	b.n	8002632 <UART_SetConfig+0x612>
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	e012      	b.n	8002632 <UART_SetConfig+0x612>
 800260c:	2340      	movs	r3, #64	; 0x40
 800260e:	e010      	b.n	8002632 <UART_SetConfig+0x612>
 8002610:	2320      	movs	r3, #32
 8002612:	e00e      	b.n	8002632 <UART_SetConfig+0x612>
 8002614:	2310      	movs	r3, #16
 8002616:	e00c      	b.n	8002632 <UART_SetConfig+0x612>
 8002618:	230c      	movs	r3, #12
 800261a:	e00a      	b.n	8002632 <UART_SetConfig+0x612>
 800261c:	230a      	movs	r3, #10
 800261e:	e008      	b.n	8002632 <UART_SetConfig+0x612>
 8002620:	2308      	movs	r3, #8
 8002622:	e006      	b.n	8002632 <UART_SetConfig+0x612>
 8002624:	2306      	movs	r3, #6
 8002626:	e004      	b.n	8002632 <UART_SetConfig+0x612>
 8002628:	2304      	movs	r3, #4
 800262a:	e002      	b.n	8002632 <UART_SetConfig+0x612>
 800262c:	2302      	movs	r3, #2
 800262e:	e000      	b.n	8002632 <UART_SetConfig+0x612>
 8002630:	2301      	movs	r3, #1
 8002632:	0019      	movs	r1, r3
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7fd fd63 	bl	8000100 <__udivsi3>
 800263a:	0003      	movs	r3, r0
 800263c:	001a      	movs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	18d2      	adds	r2, r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0019      	movs	r1, r3
 800264c:	0010      	movs	r0, r2
 800264e:	f7fd fd57 	bl	8000100 <__udivsi3>
 8002652:	0003      	movs	r3, r0
 8002654:	b29b      	uxth	r3, r3
 8002656:	617b      	str	r3, [r7, #20]
        break;
 8002658:	e13d      	b.n	80028d6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d043      	beq.n	80026ea <UART_SetConfig+0x6ca>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b01      	cmp	r3, #1
 8002668:	d03d      	beq.n	80026e6 <UART_SetConfig+0x6c6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2b02      	cmp	r3, #2
 8002670:	d037      	beq.n	80026e2 <UART_SetConfig+0x6c2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2b03      	cmp	r3, #3
 8002678:	d031      	beq.n	80026de <UART_SetConfig+0x6be>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	2b04      	cmp	r3, #4
 8002680:	d02b      	beq.n	80026da <UART_SetConfig+0x6ba>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b05      	cmp	r3, #5
 8002688:	d025      	beq.n	80026d6 <UART_SetConfig+0x6b6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	2b06      	cmp	r3, #6
 8002690:	d01f      	beq.n	80026d2 <UART_SetConfig+0x6b2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b07      	cmp	r3, #7
 8002698:	d019      	beq.n	80026ce <UART_SetConfig+0x6ae>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d013      	beq.n	80026ca <UART_SetConfig+0x6aa>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	d00d      	beq.n	80026c6 <UART_SetConfig+0x6a6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	d007      	beq.n	80026c2 <UART_SetConfig+0x6a2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	2b0b      	cmp	r3, #11
 80026b8:	d101      	bne.n	80026be <UART_SetConfig+0x69e>
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <UART_SetConfig+0x7bc>)
 80026bc:	e016      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026be:	4b48      	ldr	r3, [pc, #288]	; (80027e0 <UART_SetConfig+0x7c0>)
 80026c0:	e014      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026c2:	4b48      	ldr	r3, [pc, #288]	; (80027e4 <UART_SetConfig+0x7c4>)
 80026c4:	e012      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026c6:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <UART_SetConfig+0x7c8>)
 80026c8:	e010      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026ca:	4b48      	ldr	r3, [pc, #288]	; (80027ec <UART_SetConfig+0x7cc>)
 80026cc:	e00e      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026ce:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <UART_SetConfig+0x7d0>)
 80026d0:	e00c      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026d2:	4b48      	ldr	r3, [pc, #288]	; (80027f4 <UART_SetConfig+0x7d4>)
 80026d4:	e00a      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026d6:	4b48      	ldr	r3, [pc, #288]	; (80027f8 <UART_SetConfig+0x7d8>)
 80026d8:	e008      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026da:	4b48      	ldr	r3, [pc, #288]	; (80027fc <UART_SetConfig+0x7dc>)
 80026dc:	e006      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026de:	4b48      	ldr	r3, [pc, #288]	; (8002800 <UART_SetConfig+0x7e0>)
 80026e0:	e004      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <UART_SetConfig+0x7e4>)
 80026e4:	e002      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026e6:	4b48      	ldr	r3, [pc, #288]	; (8002808 <UART_SetConfig+0x7e8>)
 80026e8:	e000      	b.n	80026ec <UART_SetConfig+0x6cc>
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <UART_SetConfig+0x7c0>)
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6852      	ldr	r2, [r2, #4]
 80026f0:	0852      	lsrs	r2, r2, #1
 80026f2:	189a      	adds	r2, r3, r2
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0019      	movs	r1, r3
 80026fa:	0010      	movs	r0, r2
 80026fc:	f7fd fd00 	bl	8000100 <__udivsi3>
 8002700:	0003      	movs	r3, r0
 8002702:	b29b      	uxth	r3, r3
 8002704:	617b      	str	r3, [r7, #20]
        break;
 8002706:	e0e6      	b.n	80028d6 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002708:	f7ff f9c2 	bl	8001a90 <HAL_RCC_GetSysClockFreq>
 800270c:	0003      	movs	r3, r0
 800270e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	2b00      	cmp	r3, #0
 8002716:	d044      	beq.n	80027a2 <UART_SetConfig+0x782>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	2b01      	cmp	r3, #1
 800271e:	d03e      	beq.n	800279e <UART_SetConfig+0x77e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b02      	cmp	r3, #2
 8002726:	d038      	beq.n	800279a <UART_SetConfig+0x77a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	2b03      	cmp	r3, #3
 800272e:	d032      	beq.n	8002796 <UART_SetConfig+0x776>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	2b04      	cmp	r3, #4
 8002736:	d02c      	beq.n	8002792 <UART_SetConfig+0x772>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2b05      	cmp	r3, #5
 800273e:	d026      	beq.n	800278e <UART_SetConfig+0x76e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	2b06      	cmp	r3, #6
 8002746:	d020      	beq.n	800278a <UART_SetConfig+0x76a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b07      	cmp	r3, #7
 800274e:	d01a      	beq.n	8002786 <UART_SetConfig+0x766>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	2b08      	cmp	r3, #8
 8002756:	d014      	beq.n	8002782 <UART_SetConfig+0x762>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b09      	cmp	r3, #9
 800275e:	d00e      	beq.n	800277e <UART_SetConfig+0x75e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b0a      	cmp	r3, #10
 8002766:	d008      	beq.n	800277a <UART_SetConfig+0x75a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b0b      	cmp	r3, #11
 800276e:	d102      	bne.n	8002776 <UART_SetConfig+0x756>
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	e016      	b.n	80027a4 <UART_SetConfig+0x784>
 8002776:	2301      	movs	r3, #1
 8002778:	e014      	b.n	80027a4 <UART_SetConfig+0x784>
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	e012      	b.n	80027a4 <UART_SetConfig+0x784>
 800277e:	2340      	movs	r3, #64	; 0x40
 8002780:	e010      	b.n	80027a4 <UART_SetConfig+0x784>
 8002782:	2320      	movs	r3, #32
 8002784:	e00e      	b.n	80027a4 <UART_SetConfig+0x784>
 8002786:	2310      	movs	r3, #16
 8002788:	e00c      	b.n	80027a4 <UART_SetConfig+0x784>
 800278a:	230c      	movs	r3, #12
 800278c:	e00a      	b.n	80027a4 <UART_SetConfig+0x784>
 800278e:	230a      	movs	r3, #10
 8002790:	e008      	b.n	80027a4 <UART_SetConfig+0x784>
 8002792:	2308      	movs	r3, #8
 8002794:	e006      	b.n	80027a4 <UART_SetConfig+0x784>
 8002796:	2306      	movs	r3, #6
 8002798:	e004      	b.n	80027a4 <UART_SetConfig+0x784>
 800279a:	2304      	movs	r3, #4
 800279c:	e002      	b.n	80027a4 <UART_SetConfig+0x784>
 800279e:	2302      	movs	r3, #2
 80027a0:	e000      	b.n	80027a4 <UART_SetConfig+0x784>
 80027a2:	2301      	movs	r3, #1
 80027a4:	0019      	movs	r1, r3
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f7fd fcaa 	bl	8000100 <__udivsi3>
 80027ac:	0003      	movs	r3, r0
 80027ae:	001a      	movs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	085b      	lsrs	r3, r3, #1
 80027b6:	18d2      	adds	r2, r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0019      	movs	r1, r3
 80027be:	0010      	movs	r0, r2
 80027c0:	f7fd fc9e 	bl	8000100 <__udivsi3>
 80027c4:	0003      	movs	r3, r0
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	617b      	str	r3, [r7, #20]
        break;
 80027ca:	e084      	b.n	80028d6 <UART_SetConfig+0x8b6>
 80027cc:	00001554 	.word	0x00001554
 80027d0:	00001998 	.word	0x00001998
 80027d4:	00002aaa 	.word	0x00002aaa
 80027d8:	0000ffff 	.word	0x0000ffff
 80027dc:	0000f424 	.word	0x0000f424
 80027e0:	00f42400 	.word	0x00f42400
 80027e4:	0001e848 	.word	0x0001e848
 80027e8:	0003d090 	.word	0x0003d090
 80027ec:	0007a120 	.word	0x0007a120
 80027f0:	000f4240 	.word	0x000f4240
 80027f4:	00145855 	.word	0x00145855
 80027f8:	00186a00 	.word	0x00186a00
 80027fc:	001e8480 	.word	0x001e8480
 8002800:	0028b0aa 	.word	0x0028b0aa
 8002804:	003d0900 	.word	0x003d0900
 8002808:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d04b      	beq.n	80028ac <UART_SetConfig+0x88c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2b01      	cmp	r3, #1
 800281a:	d044      	beq.n	80028a6 <UART_SetConfig+0x886>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b02      	cmp	r3, #2
 8002822:	d03d      	beq.n	80028a0 <UART_SetConfig+0x880>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	2b03      	cmp	r3, #3
 800282a:	d037      	beq.n	800289c <UART_SetConfig+0x87c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	2b04      	cmp	r3, #4
 8002832:	d030      	beq.n	8002896 <UART_SetConfig+0x876>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2b05      	cmp	r3, #5
 800283a:	d02a      	beq.n	8002892 <UART_SetConfig+0x872>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	2b06      	cmp	r3, #6
 8002842:	d024      	beq.n	800288e <UART_SetConfig+0x86e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	2b07      	cmp	r3, #7
 800284a:	d01d      	beq.n	8002888 <UART_SetConfig+0x868>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	2b08      	cmp	r3, #8
 8002852:	d016      	beq.n	8002882 <UART_SetConfig+0x862>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2b09      	cmp	r3, #9
 800285a:	d00f      	beq.n	800287c <UART_SetConfig+0x85c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	2b0a      	cmp	r3, #10
 8002862:	d008      	beq.n	8002876 <UART_SetConfig+0x856>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	2b0b      	cmp	r3, #11
 800286a:	d101      	bne.n	8002870 <UART_SetConfig+0x850>
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	e01f      	b.n	80028b0 <UART_SetConfig+0x890>
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	e01c      	b.n	80028b0 <UART_SetConfig+0x890>
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	e019      	b.n	80028b0 <UART_SetConfig+0x890>
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	e016      	b.n	80028b0 <UART_SetConfig+0x890>
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	e013      	b.n	80028b0 <UART_SetConfig+0x890>
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	e010      	b.n	80028b0 <UART_SetConfig+0x890>
 800288e:	4b24      	ldr	r3, [pc, #144]	; (8002920 <UART_SetConfig+0x900>)
 8002890:	e00e      	b.n	80028b0 <UART_SetConfig+0x890>
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <UART_SetConfig+0x904>)
 8002894:	e00c      	b.n	80028b0 <UART_SetConfig+0x890>
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	015b      	lsls	r3, r3, #5
 800289a:	e009      	b.n	80028b0 <UART_SetConfig+0x890>
 800289c:	4b22      	ldr	r3, [pc, #136]	; (8002928 <UART_SetConfig+0x908>)
 800289e:	e007      	b.n	80028b0 <UART_SetConfig+0x890>
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	019b      	lsls	r3, r3, #6
 80028a4:	e004      	b.n	80028b0 <UART_SetConfig+0x890>
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	01db      	lsls	r3, r3, #7
 80028aa:	e001      	b.n	80028b0 <UART_SetConfig+0x890>
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6852      	ldr	r2, [r2, #4]
 80028b4:	0852      	lsrs	r2, r2, #1
 80028b6:	189a      	adds	r2, r3, r2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0019      	movs	r1, r3
 80028be:	0010      	movs	r0, r2
 80028c0:	f7fd fc1e 	bl	8000100 <__udivsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	617b      	str	r3, [r7, #20]
        break;
 80028ca:	e004      	b.n	80028d6 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 80028cc:	231e      	movs	r3, #30
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
        break;
 80028d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d908      	bls.n	80028ee <UART_SetConfig+0x8ce>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	4a13      	ldr	r2, [pc, #76]	; (800292c <UART_SetConfig+0x90c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d804      	bhi.n	80028ee <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	60da      	str	r2, [r3, #12]
 80028ec:	e003      	b.n	80028f6 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 80028ee:	231e      	movs	r3, #30
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	226a      	movs	r2, #106	; 0x6a
 80028fa:	2101      	movs	r1, #1
 80028fc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2268      	movs	r2, #104	; 0x68
 8002902:	2101      	movs	r1, #1
 8002904:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002912:	231e      	movs	r3, #30
 8002914:	18fb      	adds	r3, r7, r3
 8002916:	781b      	ldrb	r3, [r3, #0]
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b008      	add	sp, #32
 800291e:	bd80      	pop	{r7, pc}
 8002920:	00000aaa 	.word	0x00000aaa
 8002924:	00000ccc 	.word	0x00000ccc
 8002928:	00001555 	.word	0x00001555
 800292c:	0000ffff 	.word	0x0000ffff

08002930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	d00b      	beq.n	800295a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <UART_AdvFeatureConfig+0x144>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d00b      	beq.n	800297c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4a43      	ldr	r2, [pc, #268]	; (8002a78 <UART_AdvFeatureConfig+0x148>)
 800296c:	4013      	ands	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2204      	movs	r2, #4
 8002982:	4013      	ands	r3, r2
 8002984:	d00b      	beq.n	800299e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <UART_AdvFeatureConfig+0x14c>)
 800298e:	4013      	ands	r3, r2
 8002990:	0019      	movs	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	2208      	movs	r2, #8
 80029a4:	4013      	ands	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <UART_AdvFeatureConfig+0x150>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	2210      	movs	r2, #16
 80029c6:	4013      	ands	r3, r2
 80029c8:	d00b      	beq.n	80029e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <UART_AdvFeatureConfig+0x154>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	2220      	movs	r2, #32
 80029e8:	4013      	ands	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4a25      	ldr	r2, [pc, #148]	; (8002a88 <UART_AdvFeatureConfig+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d01d      	beq.n	8002a4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <UART_AdvFeatureConfig+0x15c>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	0019      	movs	r1, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	035b      	lsls	r3, r3, #13
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10b      	bne.n	8002a4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <UART_AdvFeatureConfig+0x160>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	4013      	ands	r3, r2
 8002a52:	d00b      	beq.n	8002a6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <UART_AdvFeatureConfig+0x164>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	0019      	movs	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]
  }
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b002      	add	sp, #8
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	fffdffff 	.word	0xfffdffff
 8002a78:	fffeffff 	.word	0xfffeffff
 8002a7c:	fffbffff 	.word	0xfffbffff
 8002a80:	ffff7fff 	.word	0xffff7fff
 8002a84:	ffffefff 	.word	0xffffefff
 8002a88:	ffffdfff 	.word	0xffffdfff
 8002a8c:	ffefffff 	.word	0xffefffff
 8002a90:	ff9fffff 	.word	0xff9fffff
 8002a94:	fff7ffff 	.word	0xfff7ffff

08002a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2288      	movs	r2, #136	; 0x88
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002aa8:	f7fe f81a 	bl	8000ae0 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b08      	cmp	r3, #8
 8002abc:	d10d      	bne.n	8002ada <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	0399      	lsls	r1, r3, #14
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <UART_CheckIdleState+0x90>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	0013      	movs	r3, r2
 8002acc:	2200      	movs	r2, #0
 8002ace:	f000 f82d 	bl	8002b2c <UART_WaitOnFlagUntilTimeout>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e021      	b.n	8002b1e <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d10d      	bne.n	8002b04 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	03d9      	lsls	r1, r3, #15
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <UART_CheckIdleState+0x90>)
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	0013      	movs	r3, r2
 8002af6:	2200      	movs	r2, #0
 8002af8:	f000 f818 	bl	8002b2c <UART_WaitOnFlagUntilTimeout>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d001      	beq.n	8002b04 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e00c      	b.n	8002b1e <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	2120      	movs	r1, #32
 8002b0a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2284      	movs	r2, #132	; 0x84
 8002b10:	2120      	movs	r1, #32
 8002b12:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	227c      	movs	r2, #124	; 0x7c
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	0018      	movs	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	01ffffff 	.word	0x01ffffff

08002b2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	603b      	str	r3, [r7, #0]
 8002b38:	1dfb      	adds	r3, r7, #7
 8002b3a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3c:	e02b      	b.n	8002b96 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3301      	adds	r3, #1
 8002b42:	d028      	beq.n	8002b96 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b44:	f7fd ffcc 	bl	8000ae0 <HAL_GetTick>
 8002b48:	0002      	movs	r2, r0
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d302      	bcc.n	8002b5a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d11d      	bne.n	8002b96 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4916      	ldr	r1, [pc, #88]	; (8002bc0 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	438a      	bics	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	2120      	movs	r1, #32
 8002b80:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2284      	movs	r2, #132	; 0x84
 8002b86:	2120      	movs	r1, #32
 8002b88:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	227c      	movs	r2, #124	; 0x7c
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e00f      	b.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	425a      	negs	r2, r3
 8002ba6:	4153      	adcs	r3, r2
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	001a      	movs	r2, r3
 8002bac:	1dfb      	adds	r3, r7, #7
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d0c4      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	fffffe5f 	.word	0xfffffe5f

08002bc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	227c      	movs	r2, #124	; 0x7c
 8002bd0:	5c9b      	ldrb	r3, [r3, r2]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_UARTEx_DisableFifoMode+0x16>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e027      	b.n	8002c2a <HAL_UARTEx_DisableFifoMode+0x66>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	227c      	movs	r2, #124	; 0x7c
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	2124      	movs	r1, #36	; 0x24
 8002be8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	438a      	bics	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	227c      	movs	r2, #124	; 0x7c
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	dfffffff 	.word	0xdfffffff

08002c38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	227c      	movs	r2, #124	; 0x7c
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e02e      	b.n	8002cae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	227c      	movs	r2, #124	; 0x7c
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	; 0x80
 8002c5c:	2124      	movs	r1, #36	; 0x24
 8002c5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2101      	movs	r1, #1
 8002c74:	438a      	bics	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	08d9      	lsrs	r1, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f854 	bl	8002d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	227c      	movs	r2, #124	; 0x7c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	0018      	movs	r0, r3
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	b004      	add	sp, #16
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	227c      	movs	r2, #124	; 0x7c
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e02f      	b.n	8002d30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	227c      	movs	r2, #124	; 0x7c
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	2124      	movs	r1, #36	; 0x24
 8002cde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 f813 	bl	8002d3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	2120      	movs	r1, #32
 8002d24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	227c      	movs	r2, #124	; 0x7c
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b004      	add	sp, #16
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	f1ffffff 	.word	0xf1ffffff

08002d3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8002d44:	2314      	movs	r3, #20
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <UARTEx_SetNbDataToProcess+0xcc>)
 8002d4a:	ca03      	ldmia	r2!, {r0, r1}
 8002d4c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8002d4e:	230c      	movs	r3, #12
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <UARTEx_SetNbDataToProcess+0xd0>)
 8002d54:	ca03      	ldmia	r2!, {r0, r1}
 8002d56:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	226a      	movs	r2, #106	; 0x6a
 8002d64:	2101      	movs	r1, #1
 8002d66:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2268      	movs	r2, #104	; 0x68
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002d70:	e046      	b.n	8002e00 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002d72:	261f      	movs	r6, #31
 8002d74:	19bb      	adds	r3, r7, r6
 8002d76:	2208      	movs	r2, #8
 8002d78:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d7a:	201e      	movs	r0, #30
 8002d7c:	183b      	adds	r3, r7, r0
 8002d7e:	2208      	movs	r2, #8
 8002d80:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	0e5b      	lsrs	r3, r3, #25
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	241d      	movs	r4, #29
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2107      	movs	r1, #7
 8002d92:	400a      	ands	r2, r1
 8002d94:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	0f5b      	lsrs	r3, r3, #29
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	251c      	movs	r5, #28
 8002da2:	197b      	adds	r3, r7, r5
 8002da4:	2107      	movs	r1, #7
 8002da6:	400a      	ands	r2, r1
 8002da8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	197a      	adds	r2, r7, r5
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	2114      	movs	r1, #20
 8002db4:	1879      	adds	r1, r7, r1
 8002db6:	5c8a      	ldrb	r2, [r1, r2]
 8002db8:	435a      	muls	r2, r3
 8002dba:	0010      	movs	r0, r2
 8002dbc:	197b      	adds	r3, r7, r5
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	250c      	movs	r5, #12
 8002dc2:	197a      	adds	r2, r7, r5
 8002dc4:	5cd3      	ldrb	r3, [r2, r3]
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	f7fd fa24 	bl	8000214 <__divsi3>
 8002dcc:	0003      	movs	r3, r0
 8002dce:	b299      	uxth	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	226a      	movs	r2, #106	; 0x6a
 8002dd4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8002dd6:	19bb      	adds	r3, r7, r6
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	193a      	adds	r2, r7, r4
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	2114      	movs	r1, #20
 8002de0:	1879      	adds	r1, r7, r1
 8002de2:	5c8a      	ldrb	r2, [r1, r2]
 8002de4:	435a      	muls	r2, r3
 8002de6:	0010      	movs	r0, r2
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	197a      	adds	r2, r7, r5
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	0019      	movs	r1, r3
 8002df2:	f7fd fa0f 	bl	8000214 <__divsi3>
 8002df6:	0003      	movs	r3, r0
 8002df8:	b299      	uxth	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2268      	movs	r2, #104	; 0x68
 8002dfe:	5299      	strh	r1, [r3, r2]
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b009      	add	sp, #36	; 0x24
 8002e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e08:	08002e80 	.word	0x08002e80
 8002e0c:	08002e88 	.word	0x08002e88

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2600      	movs	r6, #0
 8002e14:	4d0c      	ldr	r5, [pc, #48]	; (8002e48 <__libc_init_array+0x38>)
 8002e16:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <__libc_init_array+0x3c>)
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	42a6      	cmp	r6, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	2600      	movs	r6, #0
 8002e22:	f000 f821 	bl	8002e68 <_init>
 8002e26:	4d0a      	ldr	r5, [pc, #40]	; (8002e50 <__libc_init_array+0x40>)
 8002e28:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <__libc_init_array+0x44>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	42a6      	cmp	r6, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	00b3      	lsls	r3, r6, #2
 8002e36:	58eb      	ldr	r3, [r5, r3]
 8002e38:	4798      	blx	r3
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	00b3      	lsls	r3, r6, #2
 8002e40:	58eb      	ldr	r3, [r5, r3]
 8002e42:	4798      	blx	r3
 8002e44:	3601      	adds	r6, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002ef0 	.word	0x08002ef0
 8002e4c:	08002ef0 	.word	0x08002ef0
 8002e50:	08002ef0 	.word	0x08002ef0
 8002e54:	08002ef4 	.word	0x08002ef4

08002e58 <memset>:
 8002e58:	0003      	movs	r3, r0
 8002e5a:	1812      	adds	r2, r2, r0
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <memset+0xa>
 8002e60:	4770      	bx	lr
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e7f9      	b.n	8002e5c <memset+0x4>

08002e68 <_init>:
 8002e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6e:	bc08      	pop	{r3}
 8002e70:	469e      	mov	lr, r3
 8002e72:	4770      	bx	lr

08002e74 <_fini>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr
